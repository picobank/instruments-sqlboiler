// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Institution is an object representing the database table.
type Institution struct {
	InstitutionID int         `boil:"institution_id" json:"institution_id" toml:"institution_id" yaml:"institution_id"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Acronym       null.String `boil:"acronym" json:"acronym,omitempty" toml:"acronym" yaml:"acronym,omitempty"`
	FromDate      time.Time   `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ThruDate      null.Time   `boil:"thru_date" json:"thru_date,omitempty" toml:"thru_date" yaml:"thru_date,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy     string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy     string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *institutionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L institutionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstitutionColumns = struct {
	InstitutionID string
	Name          string
	Description   string
	Acronym       string
	FromDate      string
	ThruDate      string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
}{
	InstitutionID: "institution_id",
	Name:          "name",
	Description:   "description",
	Acronym:       "acronym",
	FromDate:      "from_date",
	ThruDate:      "thru_date",
	CreatedAt:     "created_at",
	CreatedBy:     "created_by",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
}

// institutionR is where relationships are stored.
type institutionR struct {
	InstitutionRoles InstitutionRoleSlice
}

// institutionL is where Load methods for each relationship are stored.
type institutionL struct{}

var (
	institutionColumns               = []string{"institution_id", "name", "description", "acronym", "from_date", "thru_date", "created_at", "created_by", "updated_at", "updated_by"}
	institutionColumnsWithoutDefault = []string{"name", "description", "acronym", "from_date", "thru_date", "created_by", "updated_by"}
	institutionColumnsWithDefault    = []string{"institution_id", "created_at", "updated_at"}
	institutionPrimaryKeyColumns     = []string{"institution_id"}
)

type (
	// InstitutionSlice is an alias for a slice of pointers to Institution.
	// This should generally be used opposed to []Institution.
	InstitutionSlice []*Institution
	// InstitutionHook is the signature for custom Institution hook methods
	InstitutionHook func(boil.Executor, *Institution) error

	institutionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	institutionType                 = reflect.TypeOf(&Institution{})
	institutionMapping              = queries.MakeStructMapping(institutionType)
	institutionPrimaryKeyMapping, _ = queries.BindMapping(institutionType, institutionMapping, institutionPrimaryKeyColumns)
	institutionInsertCacheMut       sync.RWMutex
	institutionInsertCache          = make(map[string]insertCache)
	institutionUpdateCacheMut       sync.RWMutex
	institutionUpdateCache          = make(map[string]updateCache)
	institutionUpsertCacheMut       sync.RWMutex
	institutionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var institutionBeforeInsertHooks []InstitutionHook
var institutionBeforeUpdateHooks []InstitutionHook
var institutionBeforeDeleteHooks []InstitutionHook
var institutionBeforeUpsertHooks []InstitutionHook

var institutionAfterInsertHooks []InstitutionHook
var institutionAfterSelectHooks []InstitutionHook
var institutionAfterUpdateHooks []InstitutionHook
var institutionAfterDeleteHooks []InstitutionHook
var institutionAfterUpsertHooks []InstitutionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Institution) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Institution) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Institution) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Institution) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Institution) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Institution) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Institution) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Institution) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Institution) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstitutionHook registers your hook function for all future operations.
func AddInstitutionHook(hookPoint boil.HookPoint, institutionHook InstitutionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		institutionBeforeInsertHooks = append(institutionBeforeInsertHooks, institutionHook)
	case boil.BeforeUpdateHook:
		institutionBeforeUpdateHooks = append(institutionBeforeUpdateHooks, institutionHook)
	case boil.BeforeDeleteHook:
		institutionBeforeDeleteHooks = append(institutionBeforeDeleteHooks, institutionHook)
	case boil.BeforeUpsertHook:
		institutionBeforeUpsertHooks = append(institutionBeforeUpsertHooks, institutionHook)
	case boil.AfterInsertHook:
		institutionAfterInsertHooks = append(institutionAfterInsertHooks, institutionHook)
	case boil.AfterSelectHook:
		institutionAfterSelectHooks = append(institutionAfterSelectHooks, institutionHook)
	case boil.AfterUpdateHook:
		institutionAfterUpdateHooks = append(institutionAfterUpdateHooks, institutionHook)
	case boil.AfterDeleteHook:
		institutionAfterDeleteHooks = append(institutionAfterDeleteHooks, institutionHook)
	case boil.AfterUpsertHook:
		institutionAfterUpsertHooks = append(institutionAfterUpsertHooks, institutionHook)
	}
}

// OneP returns a single institution record from the query, and panics on error.
func (q institutionQuery) OneP() *Institution {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single institution record from the query.
func (q institutionQuery) One() (*Institution, error) {
	o := &Institution{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for institution")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Institution records from the query, and panics on error.
func (q institutionQuery) AllP() InstitutionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Institution records from the query.
func (q institutionQuery) All() (InstitutionSlice, error) {
	var o []*Institution

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Institution slice")
	}

	if len(institutionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Institution records in the query, and panics on error.
func (q institutionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Institution records in the query.
func (q institutionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count institution rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q institutionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q institutionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if institution exists")
	}

	return count > 0, nil
}

// InstitutionRolesG retrieves all the institution_role's institution role.
func (o *Institution) InstitutionRolesG(mods ...qm.QueryMod) institutionRoleQuery {
	return o.InstitutionRoles(boil.GetDB(), mods...)
}

// InstitutionRoles retrieves all the institution_role's institution role with an executor.
func (o *Institution) InstitutionRoles(exec boil.Executor, mods ...qm.QueryMod) institutionRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"institution_role\".\"institution_id\"=?", o.InstitutionID),
	)

	query := InstitutionRoles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"institution_role\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"institution_role\".*"})
	}

	return query
}

// LoadInstitutionRoles allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (institutionL) LoadInstitutionRoles(e boil.Executor, singular bool, maybeInstitution interface{}) error {
	var slice []*Institution
	var object *Institution

	count := 1
	if singular {
		object = maybeInstitution.(*Institution)
	} else {
		slice = *maybeInstitution.(*[]*Institution)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &institutionR{}
		}
		args[0] = object.InstitutionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &institutionR{}
			}
			args[i] = obj.InstitutionID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"institution_role\" where \"institution_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load institution_role")
	}
	defer results.Close()

	var resultSlice []*InstitutionRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice institution_role")
	}

	if len(institutionRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InstitutionRoles = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstitutionID == foreign.InstitutionID {
				local.R.InstitutionRoles = append(local.R.InstitutionRoles, foreign)
				break
			}
		}
	}

	return nil
}

// AddInstitutionRolesG adds the given related objects to the existing relationships
// of the institution, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Institution appropriately.
// Uses the global database handle.
func (o *Institution) AddInstitutionRolesG(insert bool, related ...*InstitutionRole) error {
	return o.AddInstitutionRoles(boil.GetDB(), insert, related...)
}

// AddInstitutionRolesP adds the given related objects to the existing relationships
// of the institution, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Institution appropriately.
// Panics on error.
func (o *Institution) AddInstitutionRolesP(exec boil.Executor, insert bool, related ...*InstitutionRole) {
	if err := o.AddInstitutionRoles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstitutionRolesGP adds the given related objects to the existing relationships
// of the institution, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Institution appropriately.
// Uses the global database handle and panics on error.
func (o *Institution) AddInstitutionRolesGP(insert bool, related ...*InstitutionRole) {
	if err := o.AddInstitutionRoles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstitutionRoles adds the given related objects to the existing relationships
// of the institution, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Institution appropriately.
func (o *Institution) AddInstitutionRoles(exec boil.Executor, insert bool, related ...*InstitutionRole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InstitutionID = o.InstitutionID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"institution_id"}),
				strmangle.WhereClause("\"", "\"", 2, institutionRolePrimaryKeyColumns),
			)
			values := []interface{}{o.InstitutionID, rel.InstitutionID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InstitutionID = o.InstitutionID
		}
	}

	if o.R == nil {
		o.R = &institutionR{
			InstitutionRoles: related,
		}
	} else {
		o.R.InstitutionRoles = append(o.R.InstitutionRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &institutionRoleR{
				Institution: o,
			}
		} else {
			rel.R.Institution = o
		}
	}
	return nil
}

// InstitutionsG retrieves all records.
func InstitutionsG(mods ...qm.QueryMod) institutionQuery {
	return Institutions(boil.GetDB(), mods...)
}

// Institutions retrieves all the records using an executor.
func Institutions(exec boil.Executor, mods ...qm.QueryMod) institutionQuery {
	mods = append(mods, qm.From("\"instruments\".\"institution\""))
	return institutionQuery{NewQuery(exec, mods...)}
}

// FindInstitutionG retrieves a single record by ID.
func FindInstitutionG(institutionID int, selectCols ...string) (*Institution, error) {
	return FindInstitution(boil.GetDB(), institutionID, selectCols...)
}

// FindInstitutionGP retrieves a single record by ID, and panics on error.
func FindInstitutionGP(institutionID int, selectCols ...string) *Institution {
	retobj, err := FindInstitution(boil.GetDB(), institutionID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInstitution retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstitution(exec boil.Executor, institutionID int, selectCols ...string) (*Institution, error) {
	institutionObj := &Institution{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"institution\" where \"institution_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, institutionID)

	err := q.Bind(institutionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from institution")
	}

	return institutionObj, nil
}

// FindInstitutionP retrieves a single record by ID with an executor, and panics on error.
func FindInstitutionP(exec boil.Executor, institutionID int, selectCols ...string) *Institution {
	retobj, err := FindInstitution(exec, institutionID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Institution) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Institution) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Institution) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Institution) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no institution provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	institutionInsertCacheMut.RLock()
	cache, cached := institutionInsertCache[key]
	institutionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			institutionColumns,
			institutionColumnsWithDefault,
			institutionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(institutionType, institutionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"institution\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"institution\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into institution")
	}

	if !cached {
		institutionInsertCacheMut.Lock()
		institutionInsertCache[key] = cache
		institutionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Institution record. See Update for
// whitelist behavior description.
func (o *Institution) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Institution record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Institution) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Institution, and panics on error.
// See Update for whitelist behavior description.
func (o *Institution) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Institution.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Institution) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	institutionUpdateCacheMut.RLock()
	cache, cached := institutionUpdateCache[key]
	institutionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			institutionColumns,
			institutionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update institution, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"institution\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, institutionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, append(wl, institutionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update institution row")
	}

	if !cached {
		institutionUpdateCacheMut.Lock()
		institutionUpdateCache[key] = cache
		institutionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q institutionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q institutionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for institution")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InstitutionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InstitutionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InstitutionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstitutionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"institution\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, institutionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in institution slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Institution) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Institution) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Institution) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Institution) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no institution provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	institutionUpsertCacheMut.RLock()
	cache, cached := institutionUpsertCache[key]
	institutionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			institutionColumns,
			institutionColumnsWithDefault,
			institutionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			institutionColumns,
			institutionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert institution, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(institutionPrimaryKeyColumns))
			copy(conflict, institutionPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"institution\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(institutionType, institutionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(institutionType, institutionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert institution")
	}

	if !cached {
		institutionUpsertCacheMut.Lock()
		institutionUpsertCache[key] = cache
		institutionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Institution record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Institution) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Institution record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Institution) DeleteG() error {
	if o == nil {
		return errors.New("models: no Institution provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Institution record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Institution) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Institution record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Institution) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Institution provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), institutionPrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"institution\" WHERE \"institution_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from institution")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q institutionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q institutionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no institutionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from institution")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InstitutionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InstitutionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Institution slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InstitutionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstitutionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Institution slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(institutionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"institution\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, institutionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from institution slice")
	}

	if len(institutionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Institution) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Institution) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Institution) ReloadG() error {
	if o == nil {
		return errors.New("models: no Institution provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Institution) Reload(exec boil.Executor) error {
	ret, err := FindInstitution(exec, o.InstitutionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstitutionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstitutionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstitutionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty InstitutionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstitutionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	institutions := InstitutionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"institution\".* FROM \"instruments\".\"institution\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, institutionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&institutions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstitutionSlice")
	}

	*o = institutions

	return nil
}

// InstitutionExists checks if the Institution row exists.
func InstitutionExists(exec boil.Executor, institutionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"institution\" where \"institution_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, institutionID)
	}

	row := exec.QueryRow(sql, institutionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if institution exists")
	}

	return exists, nil
}

// InstitutionExistsG checks if the Institution row exists.
func InstitutionExistsG(institutionID int) (bool, error) {
	return InstitutionExists(boil.GetDB(), institutionID)
}

// InstitutionExistsGP checks if the Institution row exists. Panics on error.
func InstitutionExistsGP(institutionID int) bool {
	e, err := InstitutionExists(boil.GetDB(), institutionID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InstitutionExistsP checks if the Institution row exists. Panics on error.
func InstitutionExistsP(exec boil.Executor, institutionID int) bool {
	e, err := InstitutionExists(exec, institutionID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
