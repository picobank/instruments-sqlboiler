// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInstitutionRoles(t *testing.T) {
	t.Parallel()

	query := InstitutionRoles(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInstitutionRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = institutionRole.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstitutionRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstitutionRoles(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstitutionRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstitutionRoleSlice{institutionRole}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInstitutionRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InstitutionRoleExists(tx, institutionRole.InstitutionID, institutionRole.InstrumentID)
	if err != nil {
		t.Errorf("Unable to check if InstitutionRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstitutionRoleExistsG to return true, but got false.")
	}
}
func testInstitutionRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	institutionRoleFound, err := FindInstitutionRole(tx, institutionRole.InstitutionID, institutionRole.InstrumentID)
	if err != nil {
		t.Error(err)
	}

	if institutionRoleFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInstitutionRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstitutionRoles(tx).Bind(institutionRole); err != nil {
		t.Error(err)
	}
}

func testInstitutionRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := InstitutionRoles(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstitutionRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRoleOne := &InstitutionRole{}
	institutionRoleTwo := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRoleOne, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}
	if err = randomize.Struct(seed, institutionRoleTwo, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRoleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = institutionRoleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstitutionRoles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstitutionRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	institutionRoleOne := &InstitutionRole{}
	institutionRoleTwo := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRoleOne, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}
	if err = randomize.Struct(seed, institutionRoleTwo, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRoleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = institutionRoleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func institutionRoleBeforeInsertHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleAfterInsertHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleAfterSelectHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleBeforeUpdateHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleAfterUpdateHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleBeforeDeleteHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleAfterDeleteHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleBeforeUpsertHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func institutionRoleAfterUpsertHook(e boil.Executor, o *InstitutionRole) error {
	*o = InstitutionRole{}
	return nil
}

func testInstitutionRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &InstitutionRole{}
	o := &InstitutionRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, institutionRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstitutionRole object: %s", err)
	}

	AddInstitutionRoleHook(boil.BeforeInsertHook, institutionRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	institutionRoleBeforeInsertHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.AfterInsertHook, institutionRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	institutionRoleAfterInsertHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.AfterSelectHook, institutionRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	institutionRoleAfterSelectHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.BeforeUpdateHook, institutionRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	institutionRoleBeforeUpdateHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.AfterUpdateHook, institutionRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	institutionRoleAfterUpdateHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.BeforeDeleteHook, institutionRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	institutionRoleBeforeDeleteHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.AfterDeleteHook, institutionRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	institutionRoleAfterDeleteHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.BeforeUpsertHook, institutionRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	institutionRoleBeforeUpsertHooks = []InstitutionRoleHook{}

	AddInstitutionRoleHook(boil.AfterUpsertHook, institutionRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	institutionRoleAfterUpsertHooks = []InstitutionRoleHook{}
}
func testInstitutionRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstitutionRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx, institutionRoleColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstitutionRoleToOneInstitutionUsingInstitution(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local InstitutionRole
	var foreign Institution

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, institutionDBTypes, false, institutionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Institution struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.InstitutionID = foreign.InstitutionID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Institution(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InstitutionID != foreign.InstitutionID {
		t.Errorf("want: %v, got %v", foreign.InstitutionID, check.InstitutionID)
	}

	slice := InstitutionRoleSlice{&local}
	if err = local.L.LoadInstitution(tx, false, (*[]*InstitutionRole)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Institution == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Institution = nil
	if err = local.L.LoadInstitution(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Institution == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstitutionRoleToOneInstrumentUsingInstrument(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local InstitutionRole
	var foreign Instrument

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.InstrumentID = foreign.InstrumentID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Instrument(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InstrumentID != foreign.InstrumentID {
		t.Errorf("want: %v, got %v", foreign.InstrumentID, check.InstrumentID)
	}

	slice := InstitutionRoleSlice{&local}
	if err = local.L.LoadInstrument(tx, false, (*[]*InstitutionRole)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Instrument == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Instrument = nil
	if err = local.L.LoadInstrument(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Instrument == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstitutionRoleToOneSetOpInstitutionUsingInstitution(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstitutionRole
	var b, c Institution

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, institutionRoleDBTypes, false, strmangle.SetComplement(institutionRolePrimaryKeyColumns, institutionRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, institutionDBTypes, false, strmangle.SetComplement(institutionPrimaryKeyColumns, institutionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, institutionDBTypes, false, strmangle.SetComplement(institutionPrimaryKeyColumns, institutionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Institution{&b, &c} {
		err = a.SetInstitution(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Institution != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InstitutionRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InstitutionID != x.InstitutionID {
			t.Error("foreign key was wrong value", a.InstitutionID)
		}

		if exists, err := InstitutionRoleExists(tx, a.InstitutionID, a.InstrumentID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testInstitutionRoleToOneSetOpInstrumentUsingInstrument(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstitutionRole
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, institutionRoleDBTypes, false, strmangle.SetComplement(institutionRolePrimaryKeyColumns, institutionRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Instrument{&b, &c} {
		err = a.SetInstrument(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Instrument != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InstitutionRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InstrumentID != x.InstrumentID {
			t.Error("foreign key was wrong value", a.InstrumentID)
		}

		if exists, err := InstitutionRoleExists(tx, a.InstitutionID, a.InstrumentID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testInstitutionRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = institutionRole.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInstitutionRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstitutionRoleSlice{institutionRole}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInstitutionRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstitutionRoles(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	institutionRoleDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `CreatedBy`: `character varying`, `Description`: `character varying`, `FromDate`: `timestamp without time zone`, `InstitutionID`: `integer`, `InstrumentID`: `integer`, `ThruDate`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `UpdatedBy`: `character varying`}
	_                      = bytes.MinRead
)

func testInstitutionRolesUpdate(t *testing.T) {
	t.Parallel()

	if len(institutionRoleColumns) == len(institutionRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	if err = institutionRole.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInstitutionRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(institutionRoleColumns) == len(institutionRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	institutionRole := &InstitutionRole{}
	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, institutionRole, institutionRoleDBTypes, true, institutionRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(institutionRoleColumns, institutionRolePrimaryKeyColumns) {
		fields = institutionRoleColumns
	} else {
		fields = strmangle.SetComplement(
			institutionRoleColumns,
			institutionRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(institutionRole))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InstitutionRoleSlice{institutionRole}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInstitutionRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(institutionRoleColumns) == len(institutionRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	institutionRole := InstitutionRole{}
	if err = randomize.Struct(seed, &institutionRole, institutionRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = institutionRole.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstitutionRole: %s", err)
	}

	count, err := InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &institutionRole, institutionRoleDBTypes, false, institutionRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstitutionRole struct: %s", err)
	}

	if err = institutionRole.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstitutionRole: %s", err)
	}

	count, err = InstitutionRoles(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
