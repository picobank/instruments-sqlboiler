// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInstrumentClasses(t *testing.T) {
	t.Parallel()

	query := InstrumentClasses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInstrumentClassesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentClass.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentClassesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentClasses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentClassesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentClassSlice{instrumentClass}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInstrumentClassesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InstrumentClassExists(tx, instrumentClass.InstrumentClassID)
	if err != nil {
		t.Errorf("Unable to check if InstrumentClass exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstrumentClassExistsG to return true, but got false.")
	}
}
func testInstrumentClassesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	instrumentClassFound, err := FindInstrumentClass(tx, instrumentClass.InstrumentClassID)
	if err != nil {
		t.Error(err)
	}

	if instrumentClassFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInstrumentClassesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentClasses(tx).Bind(instrumentClass); err != nil {
		t.Error(err)
	}
}

func testInstrumentClassesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := InstrumentClasses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstrumentClassesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClassOne := &InstrumentClass{}
	instrumentClassTwo := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClassOne, instrumentClassDBTypes, false, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentClassTwo, instrumentClassDBTypes, false, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClassOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentClassTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentClasses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstrumentClassesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instrumentClassOne := &InstrumentClass{}
	instrumentClassTwo := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClassOne, instrumentClassDBTypes, false, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentClassTwo, instrumentClassDBTypes, false, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClassOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentClassTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func instrumentClassBeforeInsertHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassAfterInsertHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassAfterSelectHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassBeforeUpdateHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassAfterUpdateHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassBeforeDeleteHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassAfterDeleteHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassBeforeUpsertHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func instrumentClassAfterUpsertHook(e boil.Executor, o *InstrumentClass) error {
	*o = InstrumentClass{}
	return nil
}

func testInstrumentClassesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &InstrumentClass{}
	o := &InstrumentClass{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instrumentClassDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstrumentClass object: %s", err)
	}

	AddInstrumentClassHook(boil.BeforeInsertHook, instrumentClassBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instrumentClassBeforeInsertHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.AfterInsertHook, instrumentClassAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instrumentClassAfterInsertHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.AfterSelectHook, instrumentClassAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instrumentClassAfterSelectHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.BeforeUpdateHook, instrumentClassBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentClassBeforeUpdateHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.AfterUpdateHook, instrumentClassAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentClassAfterUpdateHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.BeforeDeleteHook, instrumentClassBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentClassBeforeDeleteHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.AfterDeleteHook, instrumentClassAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentClassAfterDeleteHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.BeforeUpsertHook, instrumentClassBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentClassBeforeUpsertHooks = []InstrumentClassHook{}

	AddInstrumentClassHook(boil.AfterUpsertHook, instrumentClassAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentClassAfterUpsertHooks = []InstrumentClassHook{}
}
func testInstrumentClassesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentClassesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx, instrumentClassColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentClassToManyInstruments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentClass
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, instrumentDBTypes, false, instrumentColumnsWithDefault...)
	randomize.Struct(seed, &c, instrumentDBTypes, false, instrumentColumnsWithDefault...)

	b.InstrumentClassID = a.InstrumentClassID
	c.InstrumentClassID = a.InstrumentClassID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	instrument, err := a.Instruments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range instrument {
		if v.InstrumentClassID == b.InstrumentClassID {
			bFound = true
		}
		if v.InstrumentClassID == c.InstrumentClassID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentClassSlice{&a}
	if err = a.L.LoadInstruments(tx, false, (*[]*InstrumentClass)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Instruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Instruments = nil
	if err = a.L.LoadInstruments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Instruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", instrument)
	}
}

func testInstrumentClassToManyAddOpInstruments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentClass
	var b, c, d, e Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentClassDBTypes, false, strmangle.SetComplement(instrumentClassPrimaryKeyColumns, instrumentClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Instrument{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Instrument{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInstruments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentClassID != first.InstrumentClassID {
			t.Error("foreign key was wrong value", a.InstrumentClassID, first.InstrumentClassID)
		}
		if a.InstrumentClassID != second.InstrumentClassID {
			t.Error("foreign key was wrong value", a.InstrumentClassID, second.InstrumentClassID)
		}

		if first.R.InstrumentClass != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InstrumentClass != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Instruments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Instruments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Instruments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentClassesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentClass.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentClassesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentClassSlice{instrumentClass}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInstrumentClassesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentClasses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instrumentClassDBTypes = map[string]string{`InstrumentClassID`: `smallint`, `Name`: `character varying`}
	_                      = bytes.MinRead
)

func testInstrumentClassesUpdate(t *testing.T) {
	t.Parallel()

	if len(instrumentClassColumns) == len(instrumentClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	if err = instrumentClass.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentClassesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instrumentClassColumns) == len(instrumentClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentClass := &InstrumentClass{}
	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentClass, instrumentClassDBTypes, true, instrumentClassPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instrumentClassColumns, instrumentClassPrimaryKeyColumns) {
		fields = instrumentClassColumns
	} else {
		fields = strmangle.SetComplement(
			instrumentClassColumns,
			instrumentClassPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(instrumentClass))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InstrumentClassSlice{instrumentClass}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInstrumentClassesUpsert(t *testing.T) {
	t.Parallel()

	if len(instrumentClassColumns) == len(instrumentClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	instrumentClass := InstrumentClass{}
	if err = randomize.Struct(seed, &instrumentClass, instrumentClassDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentClass.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentClass: %s", err)
	}

	count, err := InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &instrumentClass, instrumentClassDBTypes, false, instrumentClassPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	if err = instrumentClass.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentClass: %s", err)
	}

	count, err = InstrumentClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
