// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Instrument is an object representing the database table.
type Instrument struct {
	InstrumentID      int         `boil:"instrument_id" json:"instrument_id" toml:"instrument_id" yaml:"instrument_id"`
	Symbol            string      `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	InstrumentClassID int16       `boil:"instrument_class_id" json:"instrument_class_id" toml:"instrument_class_id" yaml:"instrument_class_id"`
	CurrencyID        null.Int    `boil:"currency_id" json:"currency_id,omitempty" toml:"currency_id" yaml:"currency_id,omitempty"`
	FromDate          time.Time   `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ThruDate          null.Time   `boil:"thru_date" json:"thru_date,omitempty" toml:"thru_date" yaml:"thru_date,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy         string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedBy         string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *instrumentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instrumentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstrumentColumns = struct {
	InstrumentID      string
	Symbol            string
	Name              string
	Description       string
	InstrumentClassID string
	CurrencyID        string
	FromDate          string
	ThruDate          string
	CreatedAt         string
	UpdatedAt         string
	CreatedBy         string
	UpdatedBy         string
}{
	InstrumentID:      "instrument_id",
	Symbol:            "symbol",
	Name:              "name",
	Description:       "description",
	InstrumentClassID: "instrument_class_id",
	CurrencyID:        "currency_id",
	FromDate:          "from_date",
	ThruDate:          "thru_date",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	CreatedBy:         "created_by",
	UpdatedBy:         "updated_by",
}

// instrumentR is where relationships are stored.
type instrumentR struct {
	InstrumentClass          *InstrumentClass
	Currency                 *Instrument
	Equity                   *Equity
	PayCurrencyEquities      EquitySlice
	ExerciseCurrencyEquities EquitySlice
	CompanyCurrencyEquities  EquitySlice
	InstitutionRoles         InstitutionRoleSlice
	CurrencyInstruments      InstrumentSlice
}

// instrumentL is where Load methods for each relationship are stored.
type instrumentL struct{}

var (
	instrumentColumns               = []string{"instrument_id", "symbol", "name", "description", "instrument_class_id", "currency_id", "from_date", "thru_date", "created_at", "updated_at", "created_by", "updated_by"}
	instrumentColumnsWithoutDefault = []string{"symbol", "name", "description", "instrument_class_id", "currency_id", "from_date", "thru_date", "created_by", "updated_by"}
	instrumentColumnsWithDefault    = []string{"instrument_id", "created_at", "updated_at"}
	instrumentPrimaryKeyColumns     = []string{"instrument_id"}
)

type (
	// InstrumentSlice is an alias for a slice of pointers to Instrument.
	// This should generally be used opposed to []Instrument.
	InstrumentSlice []*Instrument
	// InstrumentHook is the signature for custom Instrument hook methods
	InstrumentHook func(boil.Executor, *Instrument) error

	instrumentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instrumentType                 = reflect.TypeOf(&Instrument{})
	instrumentMapping              = queries.MakeStructMapping(instrumentType)
	instrumentPrimaryKeyMapping, _ = queries.BindMapping(instrumentType, instrumentMapping, instrumentPrimaryKeyColumns)
	instrumentInsertCacheMut       sync.RWMutex
	instrumentInsertCache          = make(map[string]insertCache)
	instrumentUpdateCacheMut       sync.RWMutex
	instrumentUpdateCache          = make(map[string]updateCache)
	instrumentUpsertCacheMut       sync.RWMutex
	instrumentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var instrumentBeforeInsertHooks []InstrumentHook
var instrumentBeforeUpdateHooks []InstrumentHook
var instrumentBeforeDeleteHooks []InstrumentHook
var instrumentBeforeUpsertHooks []InstrumentHook

var instrumentAfterInsertHooks []InstrumentHook
var instrumentAfterSelectHooks []InstrumentHook
var instrumentAfterUpdateHooks []InstrumentHook
var instrumentAfterDeleteHooks []InstrumentHook
var instrumentAfterUpsertHooks []InstrumentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Instrument) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Instrument) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Instrument) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Instrument) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Instrument) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Instrument) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Instrument) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Instrument) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Instrument) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstrumentHook registers your hook function for all future operations.
func AddInstrumentHook(hookPoint boil.HookPoint, instrumentHook InstrumentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		instrumentBeforeInsertHooks = append(instrumentBeforeInsertHooks, instrumentHook)
	case boil.BeforeUpdateHook:
		instrumentBeforeUpdateHooks = append(instrumentBeforeUpdateHooks, instrumentHook)
	case boil.BeforeDeleteHook:
		instrumentBeforeDeleteHooks = append(instrumentBeforeDeleteHooks, instrumentHook)
	case boil.BeforeUpsertHook:
		instrumentBeforeUpsertHooks = append(instrumentBeforeUpsertHooks, instrumentHook)
	case boil.AfterInsertHook:
		instrumentAfterInsertHooks = append(instrumentAfterInsertHooks, instrumentHook)
	case boil.AfterSelectHook:
		instrumentAfterSelectHooks = append(instrumentAfterSelectHooks, instrumentHook)
	case boil.AfterUpdateHook:
		instrumentAfterUpdateHooks = append(instrumentAfterUpdateHooks, instrumentHook)
	case boil.AfterDeleteHook:
		instrumentAfterDeleteHooks = append(instrumentAfterDeleteHooks, instrumentHook)
	case boil.AfterUpsertHook:
		instrumentAfterUpsertHooks = append(instrumentAfterUpsertHooks, instrumentHook)
	}
}

// OneP returns a single instrument record from the query, and panics on error.
func (q instrumentQuery) OneP() *Instrument {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single instrument record from the query.
func (q instrumentQuery) One() (*Instrument, error) {
	o := &Instrument{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instrument")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Instrument records from the query, and panics on error.
func (q instrumentQuery) AllP() InstrumentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Instrument records from the query.
func (q instrumentQuery) All() (InstrumentSlice, error) {
	var o []*Instrument

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Instrument slice")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Instrument records in the query, and panics on error.
func (q instrumentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Instrument records in the query.
func (q instrumentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instrument rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q instrumentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q instrumentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instrument exists")
	}

	return count > 0, nil
}

// InstrumentClassG pointed to by the foreign key.
func (o *Instrument) InstrumentClassG(mods ...qm.QueryMod) instrumentClassQuery {
	return o.InstrumentClass(boil.GetDB(), mods...)
}

// InstrumentClass pointed to by the foreign key.
func (o *Instrument) InstrumentClass(exec boil.Executor, mods ...qm.QueryMod) instrumentClassQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_class_id=?", o.InstrumentClassID),
	}

	queryMods = append(queryMods, mods...)

	query := InstrumentClasses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument_class\"")

	return query
}

// CurrencyG pointed to by the foreign key.
func (o *Instrument) CurrencyG(mods ...qm.QueryMod) instrumentQuery {
	return o.Currency(boil.GetDB(), mods...)
}

// Currency pointed to by the foreign key.
func (o *Instrument) Currency(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
}

// EquityG pointed to by the foreign key.
func (o *Instrument) EquityG(mods ...qm.QueryMod) equityQuery {
	return o.Equity(boil.GetDB(), mods...)
}

// Equity pointed to by the foreign key.
func (o *Instrument) Equity(exec boil.Executor, mods ...qm.QueryMod) equityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.InstrumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Equities(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"equity\"")

	return query
}

// PayCurrencyEquitiesG retrieves all the equity's equity via pay_currency_id column.
func (o *Instrument) PayCurrencyEquitiesG(mods ...qm.QueryMod) equityQuery {
	return o.PayCurrencyEquities(boil.GetDB(), mods...)
}

// PayCurrencyEquities retrieves all the equity's equity with an executor via pay_currency_id column.
func (o *Instrument) PayCurrencyEquities(exec boil.Executor, mods ...qm.QueryMod) equityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"equity\".\"pay_currency_id\"=?", o.InstrumentID),
	)

	query := Equities(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"equity\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"equity\".*"})
	}

	return query
}

// ExerciseCurrencyEquitiesG retrieves all the equity's equity via exercise_currency_id column.
func (o *Instrument) ExerciseCurrencyEquitiesG(mods ...qm.QueryMod) equityQuery {
	return o.ExerciseCurrencyEquities(boil.GetDB(), mods...)
}

// ExerciseCurrencyEquities retrieves all the equity's equity with an executor via exercise_currency_id column.
func (o *Instrument) ExerciseCurrencyEquities(exec boil.Executor, mods ...qm.QueryMod) equityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"equity\".\"exercise_currency_id\"=?", o.InstrumentID),
	)

	query := Equities(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"equity\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"equity\".*"})
	}

	return query
}

// CompanyCurrencyEquitiesG retrieves all the equity's equity via company_currency_id column.
func (o *Instrument) CompanyCurrencyEquitiesG(mods ...qm.QueryMod) equityQuery {
	return o.CompanyCurrencyEquities(boil.GetDB(), mods...)
}

// CompanyCurrencyEquities retrieves all the equity's equity with an executor via company_currency_id column.
func (o *Instrument) CompanyCurrencyEquities(exec boil.Executor, mods ...qm.QueryMod) equityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"equity\".\"company_currency_id\"=?", o.InstrumentID),
	)

	query := Equities(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"equity\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"equity\".*"})
	}

	return query
}

// InstitutionRolesG retrieves all the institution_role's institution role.
func (o *Instrument) InstitutionRolesG(mods ...qm.QueryMod) institutionRoleQuery {
	return o.InstitutionRoles(boil.GetDB(), mods...)
}

// InstitutionRoles retrieves all the institution_role's institution role with an executor.
func (o *Instrument) InstitutionRoles(exec boil.Executor, mods ...qm.QueryMod) institutionRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"institution_role\".\"instrument_id\"=?", o.InstrumentID),
	)

	query := InstitutionRoles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"institution_role\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"institution_role\".*"})
	}

	return query
}

// CurrencyInstrumentsG retrieves all the instrument's instrument via currency_id column.
func (o *Instrument) CurrencyInstrumentsG(mods ...qm.QueryMod) instrumentQuery {
	return o.CurrencyInstruments(boil.GetDB(), mods...)
}

// CurrencyInstruments retrieves all the instrument's instrument with an executor via currency_id column.
func (o *Instrument) CurrencyInstruments(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"instrument\".\"currency_id\"=?", o.InstrumentID),
	)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"instrument\".*"})
	}

	return query
}

// LoadInstrumentClass allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadInstrumentClass(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentClassID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentClassID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument_class\" where \"instrument_class_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InstrumentClass")
	}
	defer results.Close()

	var resultSlice []*InstrumentClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InstrumentClass")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.InstrumentClass = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstrumentClassID == foreign.InstrumentClassID {
				local.R.InstrumentClass = foreign
				break
			}
		}
	}

	return nil
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadCurrency(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.CurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.CurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Currency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID.Int == foreign.InstrumentID {
				local.R.Currency = foreign
				break
			}
		}
	}

	return nil
}

// LoadEquity allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadEquity(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"equity\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Equity")
	}
	defer results.Close()

	var resultSlice []*Equity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Equity")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Equity = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstrumentID == foreign.InstrumentID {
				local.R.Equity = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayCurrencyEquities allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadPayCurrencyEquities(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"equity\" where \"pay_currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load equity")
	}
	defer results.Close()

	var resultSlice []*Equity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice equity")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PayCurrencyEquities = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentID == foreign.PayCurrencyID.Int {
				local.R.PayCurrencyEquities = append(local.R.PayCurrencyEquities, foreign)
				break
			}
		}
	}

	return nil
}

// LoadExerciseCurrencyEquities allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadExerciseCurrencyEquities(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"equity\" where \"exercise_currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load equity")
	}
	defer results.Close()

	var resultSlice []*Equity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice equity")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExerciseCurrencyEquities = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentID == foreign.ExerciseCurrencyID.Int {
				local.R.ExerciseCurrencyEquities = append(local.R.ExerciseCurrencyEquities, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCompanyCurrencyEquities allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadCompanyCurrencyEquities(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"equity\" where \"company_currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load equity")
	}
	defer results.Close()

	var resultSlice []*Equity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice equity")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompanyCurrencyEquities = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentID == foreign.CompanyCurrencyID.Int {
				local.R.CompanyCurrencyEquities = append(local.R.CompanyCurrencyEquities, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInstitutionRoles allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadInstitutionRoles(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"institution_role\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load institution_role")
	}
	defer results.Close()

	var resultSlice []*InstitutionRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice institution_role")
	}

	if len(institutionRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InstitutionRoles = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentID == foreign.InstrumentID {
				local.R.InstitutionRoles = append(local.R.InstitutionRoles, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCurrencyInstruments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentL) LoadCurrencyInstruments(e boil.Executor, singular bool, maybeInstrument interface{}) error {
	var slice []*Instrument
	var object *Instrument

	count := 1
	if singular {
		object = maybeInstrument.(*Instrument)
	} else {
		slice = *maybeInstrument.(*[]*Instrument)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"currency_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice instrument")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrencyInstruments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentID == foreign.CurrencyID.Int {
				local.R.CurrencyInstruments = append(local.R.CurrencyInstruments, foreign)
				break
			}
		}
	}

	return nil
}

// SetInstrumentClassG of the instrument to the related item.
// Sets o.R.InstrumentClass to related.
// Adds o to related.R.Instruments.
// Uses the global database handle.
func (o *Instrument) SetInstrumentClassG(insert bool, related *InstrumentClass) error {
	return o.SetInstrumentClass(boil.GetDB(), insert, related)
}

// SetInstrumentClassP of the instrument to the related item.
// Sets o.R.InstrumentClass to related.
// Adds o to related.R.Instruments.
// Panics on error.
func (o *Instrument) SetInstrumentClassP(exec boil.Executor, insert bool, related *InstrumentClass) {
	if err := o.SetInstrumentClass(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrumentClassGP of the instrument to the related item.
// Sets o.R.InstrumentClass to related.
// Adds o to related.R.Instruments.
// Uses the global database handle and panics on error.
func (o *Instrument) SetInstrumentClassGP(insert bool, related *InstrumentClass) {
	if err := o.SetInstrumentClass(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrumentClass of the instrument to the related item.
// Sets o.R.InstrumentClass to related.
// Adds o to related.R.Instruments.
func (o *Instrument) SetInstrumentClass(exec boil.Executor, insert bool, related *InstrumentClass) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_class_id"}),
		strmangle.WhereClause("\"", "\"", 2, instrumentPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentClassID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstrumentClassID = related.InstrumentClassID

	if o.R == nil {
		o.R = &instrumentR{
			InstrumentClass: related,
		}
	} else {
		o.R.InstrumentClass = related
	}

	if related.R == nil {
		related.R = &instrumentClassR{
			Instruments: InstrumentSlice{o},
		}
	} else {
		related.R.Instruments = append(related.R.Instruments, o)
	}

	return nil
}

// SetCurrencyG of the instrument to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstruments.
// Uses the global database handle.
func (o *Instrument) SetCurrencyG(insert bool, related *Instrument) error {
	return o.SetCurrency(boil.GetDB(), insert, related)
}

// SetCurrencyP of the instrument to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstruments.
// Panics on error.
func (o *Instrument) SetCurrencyP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrencyGP of the instrument to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstruments.
// Uses the global database handle and panics on error.
func (o *Instrument) SetCurrencyGP(insert bool, related *Instrument) {
	if err := o.SetCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrency of the instrument to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstruments.
func (o *Instrument) SetCurrency(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, instrumentPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID.Int = related.InstrumentID
	o.CurrencyID.Valid = true

	if o.R == nil {
		o.R = &instrumentR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			CurrencyInstruments: InstrumentSlice{o},
		}
	} else {
		related.R.CurrencyInstruments = append(related.R.CurrencyInstruments, o)
	}

	return nil
}

// RemoveCurrencyG relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Instrument) RemoveCurrencyG(related *Instrument) error {
	return o.RemoveCurrency(boil.GetDB(), related)
}

// RemoveCurrencyP relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Instrument) RemoveCurrencyP(exec boil.Executor, related *Instrument) {
	if err := o.RemoveCurrency(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrencyGP relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Instrument) RemoveCurrencyGP(related *Instrument) {
	if err := o.RemoveCurrency(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrency relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Instrument) RemoveCurrency(exec boil.Executor, related *Instrument) error {
	var err error

	o.CurrencyID.Valid = false
	if err = o.Update(exec, "currency_id"); err != nil {
		o.CurrencyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Currency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CurrencyInstruments {
		if o.CurrencyID.Int != ri.CurrencyID.Int {
			continue
		}

		ln := len(related.R.CurrencyInstruments)
		if ln > 1 && i < ln-1 {
			related.R.CurrencyInstruments[i] = related.R.CurrencyInstruments[ln-1]
		}
		related.R.CurrencyInstruments = related.R.CurrencyInstruments[:ln-1]
		break
	}
	return nil
}

// SetEquityG of the instrument to the related item.
// Sets o.R.Equity to related.
// Adds o to related.R.Instrument.
// Uses the global database handle.
func (o *Instrument) SetEquityG(insert bool, related *Equity) error {
	return o.SetEquity(boil.GetDB(), insert, related)
}

// SetEquityP of the instrument to the related item.
// Sets o.R.Equity to related.
// Adds o to related.R.Instrument.
// Panics on error.
func (o *Instrument) SetEquityP(exec boil.Executor, insert bool, related *Equity) {
	if err := o.SetEquity(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEquityGP of the instrument to the related item.
// Sets o.R.Equity to related.
// Adds o to related.R.Instrument.
// Uses the global database handle and panics on error.
func (o *Instrument) SetEquityGP(insert bool, related *Equity) {
	if err := o.SetEquity(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEquity of the instrument to the related item.
// Sets o.R.Equity to related.
// Adds o to related.R.Instrument.
func (o *Instrument) SetEquity(exec boil.Executor, insert bool, related *Equity) error {
	var err error

	if insert {
		related.InstrumentID = o.InstrumentID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_id"}),
			strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
		)
		values := []interface{}{o.InstrumentID, related.InstrumentID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.InstrumentID = o.InstrumentID

	}

	if o.R == nil {
		o.R = &instrumentR{
			Equity: related,
		}
	} else {
		o.R.Equity = related
	}

	if related.R == nil {
		related.R = &equityR{
			Instrument: o,
		}
	} else {
		related.R.Instrument = o
	}
	return nil
}

// AddPayCurrencyEquitiesG adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.PayCurrencyEquities.
// Sets related.R.PayCurrency appropriately.
// Uses the global database handle.
func (o *Instrument) AddPayCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.AddPayCurrencyEquities(boil.GetDB(), insert, related...)
}

// AddPayCurrencyEquitiesP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.PayCurrencyEquities.
// Sets related.R.PayCurrency appropriately.
// Panics on error.
func (o *Instrument) AddPayCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.AddPayCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayCurrencyEquitiesGP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.PayCurrencyEquities.
// Sets related.R.PayCurrency appropriately.
// Uses the global database handle and panics on error.
func (o *Instrument) AddPayCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.AddPayCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayCurrencyEquities adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.PayCurrencyEquities.
// Sets related.R.PayCurrency appropriately.
func (o *Instrument) AddPayCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PayCurrencyID.Int = o.InstrumentID
			rel.PayCurrencyID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pay_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PayCurrencyID.Int = o.InstrumentID
			rel.PayCurrencyID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &instrumentR{
			PayCurrencyEquities: related,
		}
	} else {
		o.R.PayCurrencyEquities = append(o.R.PayCurrencyEquities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &equityR{
				PayCurrency: o,
			}
		} else {
			rel.R.PayCurrency = o
		}
	}
	return nil
}

// SetPayCurrencyEquitiesG removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PayCurrency's PayCurrencyEquities accordingly.
// Replaces o.R.PayCurrencyEquities with related.
// Sets related.R.PayCurrency's PayCurrencyEquities accordingly.
// Uses the global database handle.
func (o *Instrument) SetPayCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.SetPayCurrencyEquities(boil.GetDB(), insert, related...)
}

// SetPayCurrencyEquitiesP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PayCurrency's PayCurrencyEquities accordingly.
// Replaces o.R.PayCurrencyEquities with related.
// Sets related.R.PayCurrency's PayCurrencyEquities accordingly.
// Panics on error.
func (o *Instrument) SetPayCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.SetPayCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayCurrencyEquitiesGP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PayCurrency's PayCurrencyEquities accordingly.
// Replaces o.R.PayCurrencyEquities with related.
// Sets related.R.PayCurrency's PayCurrencyEquities accordingly.
// Uses the global database handle and panics on error.
func (o *Instrument) SetPayCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.SetPayCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayCurrencyEquities removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PayCurrency's PayCurrencyEquities accordingly.
// Replaces o.R.PayCurrencyEquities with related.
// Sets related.R.PayCurrency's PayCurrencyEquities accordingly.
func (o *Instrument) SetPayCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	query := "update \"instruments\".\"equity\" set \"pay_currency_id\" = null where \"pay_currency_id\" = $1"
	values := []interface{}{o.InstrumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PayCurrencyEquities {
			rel.PayCurrencyID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.PayCurrency = nil
		}

		o.R.PayCurrencyEquities = nil
	}
	return o.AddPayCurrencyEquities(exec, insert, related...)
}

// RemovePayCurrencyEquitiesG relationships from objects passed in.
// Removes related items from R.PayCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.PayCurrency.
// Uses the global database handle.
func (o *Instrument) RemovePayCurrencyEquitiesG(related ...*Equity) error {
	return o.RemovePayCurrencyEquities(boil.GetDB(), related...)
}

// RemovePayCurrencyEquitiesP relationships from objects passed in.
// Removes related items from R.PayCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.PayCurrency.
// Panics on error.
func (o *Instrument) RemovePayCurrencyEquitiesP(exec boil.Executor, related ...*Equity) {
	if err := o.RemovePayCurrencyEquities(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayCurrencyEquitiesGP relationships from objects passed in.
// Removes related items from R.PayCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.PayCurrency.
// Uses the global database handle and panics on error.
func (o *Instrument) RemovePayCurrencyEquitiesGP(related ...*Equity) {
	if err := o.RemovePayCurrencyEquities(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayCurrencyEquities relationships from objects passed in.
// Removes related items from R.PayCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.PayCurrency.
func (o *Instrument) RemovePayCurrencyEquities(exec boil.Executor, related ...*Equity) error {
	var err error
	for _, rel := range related {
		rel.PayCurrencyID.Valid = false
		if rel.R != nil {
			rel.R.PayCurrency = nil
		}
		if err = rel.Update(exec, "pay_currency_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PayCurrencyEquities {
			if rel != ri {
				continue
			}

			ln := len(o.R.PayCurrencyEquities)
			if ln > 1 && i < ln-1 {
				o.R.PayCurrencyEquities[i] = o.R.PayCurrencyEquities[ln-1]
			}
			o.R.PayCurrencyEquities = o.R.PayCurrencyEquities[:ln-1]
			break
		}
	}

	return nil
}

// AddExerciseCurrencyEquitiesG adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.ExerciseCurrencyEquities.
// Sets related.R.ExerciseCurrency appropriately.
// Uses the global database handle.
func (o *Instrument) AddExerciseCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.AddExerciseCurrencyEquities(boil.GetDB(), insert, related...)
}

// AddExerciseCurrencyEquitiesP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.ExerciseCurrencyEquities.
// Sets related.R.ExerciseCurrency appropriately.
// Panics on error.
func (o *Instrument) AddExerciseCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.AddExerciseCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExerciseCurrencyEquitiesGP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.ExerciseCurrencyEquities.
// Sets related.R.ExerciseCurrency appropriately.
// Uses the global database handle and panics on error.
func (o *Instrument) AddExerciseCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.AddExerciseCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExerciseCurrencyEquities adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.ExerciseCurrencyEquities.
// Sets related.R.ExerciseCurrency appropriately.
func (o *Instrument) AddExerciseCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExerciseCurrencyID.Int = o.InstrumentID
			rel.ExerciseCurrencyID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exercise_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExerciseCurrencyID.Int = o.InstrumentID
			rel.ExerciseCurrencyID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &instrumentR{
			ExerciseCurrencyEquities: related,
		}
	} else {
		o.R.ExerciseCurrencyEquities = append(o.R.ExerciseCurrencyEquities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &equityR{
				ExerciseCurrency: o,
			}
		} else {
			rel.R.ExerciseCurrency = o
		}
	}
	return nil
}

// SetExerciseCurrencyEquitiesG removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Replaces o.R.ExerciseCurrencyEquities with related.
// Sets related.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Uses the global database handle.
func (o *Instrument) SetExerciseCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.SetExerciseCurrencyEquities(boil.GetDB(), insert, related...)
}

// SetExerciseCurrencyEquitiesP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Replaces o.R.ExerciseCurrencyEquities with related.
// Sets related.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Panics on error.
func (o *Instrument) SetExerciseCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.SetExerciseCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExerciseCurrencyEquitiesGP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Replaces o.R.ExerciseCurrencyEquities with related.
// Sets related.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Uses the global database handle and panics on error.
func (o *Instrument) SetExerciseCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.SetExerciseCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExerciseCurrencyEquities removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
// Replaces o.R.ExerciseCurrencyEquities with related.
// Sets related.R.ExerciseCurrency's ExerciseCurrencyEquities accordingly.
func (o *Instrument) SetExerciseCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	query := "update \"instruments\".\"equity\" set \"exercise_currency_id\" = null where \"exercise_currency_id\" = $1"
	values := []interface{}{o.InstrumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ExerciseCurrencyEquities {
			rel.ExerciseCurrencyID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.ExerciseCurrency = nil
		}

		o.R.ExerciseCurrencyEquities = nil
	}
	return o.AddExerciseCurrencyEquities(exec, insert, related...)
}

// RemoveExerciseCurrencyEquitiesG relationships from objects passed in.
// Removes related items from R.ExerciseCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.ExerciseCurrency.
// Uses the global database handle.
func (o *Instrument) RemoveExerciseCurrencyEquitiesG(related ...*Equity) error {
	return o.RemoveExerciseCurrencyEquities(boil.GetDB(), related...)
}

// RemoveExerciseCurrencyEquitiesP relationships from objects passed in.
// Removes related items from R.ExerciseCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.ExerciseCurrency.
// Panics on error.
func (o *Instrument) RemoveExerciseCurrencyEquitiesP(exec boil.Executor, related ...*Equity) {
	if err := o.RemoveExerciseCurrencyEquities(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveExerciseCurrencyEquitiesGP relationships from objects passed in.
// Removes related items from R.ExerciseCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.ExerciseCurrency.
// Uses the global database handle and panics on error.
func (o *Instrument) RemoveExerciseCurrencyEquitiesGP(related ...*Equity) {
	if err := o.RemoveExerciseCurrencyEquities(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveExerciseCurrencyEquities relationships from objects passed in.
// Removes related items from R.ExerciseCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.ExerciseCurrency.
func (o *Instrument) RemoveExerciseCurrencyEquities(exec boil.Executor, related ...*Equity) error {
	var err error
	for _, rel := range related {
		rel.ExerciseCurrencyID.Valid = false
		if rel.R != nil {
			rel.R.ExerciseCurrency = nil
		}
		if err = rel.Update(exec, "exercise_currency_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ExerciseCurrencyEquities {
			if rel != ri {
				continue
			}

			ln := len(o.R.ExerciseCurrencyEquities)
			if ln > 1 && i < ln-1 {
				o.R.ExerciseCurrencyEquities[i] = o.R.ExerciseCurrencyEquities[ln-1]
			}
			o.R.ExerciseCurrencyEquities = o.R.ExerciseCurrencyEquities[:ln-1]
			break
		}
	}

	return nil
}

// AddCompanyCurrencyEquitiesG adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CompanyCurrencyEquities.
// Sets related.R.CompanyCurrency appropriately.
// Uses the global database handle.
func (o *Instrument) AddCompanyCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.AddCompanyCurrencyEquities(boil.GetDB(), insert, related...)
}

// AddCompanyCurrencyEquitiesP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CompanyCurrencyEquities.
// Sets related.R.CompanyCurrency appropriately.
// Panics on error.
func (o *Instrument) AddCompanyCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.AddCompanyCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCompanyCurrencyEquitiesGP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CompanyCurrencyEquities.
// Sets related.R.CompanyCurrency appropriately.
// Uses the global database handle and panics on error.
func (o *Instrument) AddCompanyCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.AddCompanyCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCompanyCurrencyEquities adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CompanyCurrencyEquities.
// Sets related.R.CompanyCurrency appropriately.
func (o *Instrument) AddCompanyCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyCurrencyID.Int = o.InstrumentID
			rel.CompanyCurrencyID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyCurrencyID.Int = o.InstrumentID
			rel.CompanyCurrencyID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &instrumentR{
			CompanyCurrencyEquities: related,
		}
	} else {
		o.R.CompanyCurrencyEquities = append(o.R.CompanyCurrencyEquities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &equityR{
				CompanyCurrency: o,
			}
		} else {
			rel.R.CompanyCurrency = o
		}
	}
	return nil
}

// SetCompanyCurrencyEquitiesG removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Replaces o.R.CompanyCurrencyEquities with related.
// Sets related.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Uses the global database handle.
func (o *Instrument) SetCompanyCurrencyEquitiesG(insert bool, related ...*Equity) error {
	return o.SetCompanyCurrencyEquities(boil.GetDB(), insert, related...)
}

// SetCompanyCurrencyEquitiesP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Replaces o.R.CompanyCurrencyEquities with related.
// Sets related.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Panics on error.
func (o *Instrument) SetCompanyCurrencyEquitiesP(exec boil.Executor, insert bool, related ...*Equity) {
	if err := o.SetCompanyCurrencyEquities(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompanyCurrencyEquitiesGP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Replaces o.R.CompanyCurrencyEquities with related.
// Sets related.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Uses the global database handle and panics on error.
func (o *Instrument) SetCompanyCurrencyEquitiesGP(insert bool, related ...*Equity) {
	if err := o.SetCompanyCurrencyEquities(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompanyCurrencyEquities removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
// Replaces o.R.CompanyCurrencyEquities with related.
// Sets related.R.CompanyCurrency's CompanyCurrencyEquities accordingly.
func (o *Instrument) SetCompanyCurrencyEquities(exec boil.Executor, insert bool, related ...*Equity) error {
	query := "update \"instruments\".\"equity\" set \"company_currency_id\" = null where \"company_currency_id\" = $1"
	values := []interface{}{o.InstrumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CompanyCurrencyEquities {
			rel.CompanyCurrencyID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.CompanyCurrency = nil
		}

		o.R.CompanyCurrencyEquities = nil
	}
	return o.AddCompanyCurrencyEquities(exec, insert, related...)
}

// RemoveCompanyCurrencyEquitiesG relationships from objects passed in.
// Removes related items from R.CompanyCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.CompanyCurrency.
// Uses the global database handle.
func (o *Instrument) RemoveCompanyCurrencyEquitiesG(related ...*Equity) error {
	return o.RemoveCompanyCurrencyEquities(boil.GetDB(), related...)
}

// RemoveCompanyCurrencyEquitiesP relationships from objects passed in.
// Removes related items from R.CompanyCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.CompanyCurrency.
// Panics on error.
func (o *Instrument) RemoveCompanyCurrencyEquitiesP(exec boil.Executor, related ...*Equity) {
	if err := o.RemoveCompanyCurrencyEquities(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompanyCurrencyEquitiesGP relationships from objects passed in.
// Removes related items from R.CompanyCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.CompanyCurrency.
// Uses the global database handle and panics on error.
func (o *Instrument) RemoveCompanyCurrencyEquitiesGP(related ...*Equity) {
	if err := o.RemoveCompanyCurrencyEquities(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompanyCurrencyEquities relationships from objects passed in.
// Removes related items from R.CompanyCurrencyEquities (uses pointer comparison, removal does not keep order)
// Sets related.R.CompanyCurrency.
func (o *Instrument) RemoveCompanyCurrencyEquities(exec boil.Executor, related ...*Equity) error {
	var err error
	for _, rel := range related {
		rel.CompanyCurrencyID.Valid = false
		if rel.R != nil {
			rel.R.CompanyCurrency = nil
		}
		if err = rel.Update(exec, "company_currency_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CompanyCurrencyEquities {
			if rel != ri {
				continue
			}

			ln := len(o.R.CompanyCurrencyEquities)
			if ln > 1 && i < ln-1 {
				o.R.CompanyCurrencyEquities[i] = o.R.CompanyCurrencyEquities[ln-1]
			}
			o.R.CompanyCurrencyEquities = o.R.CompanyCurrencyEquities[:ln-1]
			break
		}
	}

	return nil
}

// AddInstitutionRolesG adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Instrument appropriately.
// Uses the global database handle.
func (o *Instrument) AddInstitutionRolesG(insert bool, related ...*InstitutionRole) error {
	return o.AddInstitutionRoles(boil.GetDB(), insert, related...)
}

// AddInstitutionRolesP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Instrument appropriately.
// Panics on error.
func (o *Instrument) AddInstitutionRolesP(exec boil.Executor, insert bool, related ...*InstitutionRole) {
	if err := o.AddInstitutionRoles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstitutionRolesGP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Instrument appropriately.
// Uses the global database handle and panics on error.
func (o *Instrument) AddInstitutionRolesGP(insert bool, related ...*InstitutionRole) {
	if err := o.AddInstitutionRoles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstitutionRoles adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.InstitutionRoles.
// Sets related.R.Instrument appropriately.
func (o *Instrument) AddInstitutionRoles(exec boil.Executor, insert bool, related ...*InstitutionRole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InstrumentID = o.InstrumentID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_id"}),
				strmangle.WhereClause("\"", "\"", 2, institutionRolePrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentID, rel.InstitutionID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InstrumentID = o.InstrumentID
		}
	}

	if o.R == nil {
		o.R = &instrumentR{
			InstitutionRoles: related,
		}
	} else {
		o.R.InstitutionRoles = append(o.R.InstitutionRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &institutionRoleR{
				Instrument: o,
			}
		} else {
			rel.R.Instrument = o
		}
	}
	return nil
}

// AddCurrencyInstrumentsG adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CurrencyInstruments.
// Sets related.R.Currency appropriately.
// Uses the global database handle.
func (o *Instrument) AddCurrencyInstrumentsG(insert bool, related ...*Instrument) error {
	return o.AddCurrencyInstruments(boil.GetDB(), insert, related...)
}

// AddCurrencyInstrumentsP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CurrencyInstruments.
// Sets related.R.Currency appropriately.
// Panics on error.
func (o *Instrument) AddCurrencyInstrumentsP(exec boil.Executor, insert bool, related ...*Instrument) {
	if err := o.AddCurrencyInstruments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCurrencyInstrumentsGP adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CurrencyInstruments.
// Sets related.R.Currency appropriately.
// Uses the global database handle and panics on error.
func (o *Instrument) AddCurrencyInstrumentsGP(insert bool, related ...*Instrument) {
	if err := o.AddCurrencyInstruments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCurrencyInstruments adds the given related objects to the existing relationships
// of the instrument, optionally inserting them as new records.
// Appends related to o.R.CurrencyInstruments.
// Sets related.R.Currency appropriately.
func (o *Instrument) AddCurrencyInstruments(exec boil.Executor, insert bool, related ...*Instrument) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrencyID.Int = o.InstrumentID
			rel.CurrencyID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, instrumentPrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrencyID.Int = o.InstrumentID
			rel.CurrencyID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &instrumentR{
			CurrencyInstruments: related,
		}
	} else {
		o.R.CurrencyInstruments = append(o.R.CurrencyInstruments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &instrumentR{
				Currency: o,
			}
		} else {
			rel.R.Currency = o
		}
	}
	return nil
}

// SetCurrencyInstrumentsG removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Currency's CurrencyInstruments accordingly.
// Replaces o.R.CurrencyInstruments with related.
// Sets related.R.Currency's CurrencyInstruments accordingly.
// Uses the global database handle.
func (o *Instrument) SetCurrencyInstrumentsG(insert bool, related ...*Instrument) error {
	return o.SetCurrencyInstruments(boil.GetDB(), insert, related...)
}

// SetCurrencyInstrumentsP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Currency's CurrencyInstruments accordingly.
// Replaces o.R.CurrencyInstruments with related.
// Sets related.R.Currency's CurrencyInstruments accordingly.
// Panics on error.
func (o *Instrument) SetCurrencyInstrumentsP(exec boil.Executor, insert bool, related ...*Instrument) {
	if err := o.SetCurrencyInstruments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrencyInstrumentsGP removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Currency's CurrencyInstruments accordingly.
// Replaces o.R.CurrencyInstruments with related.
// Sets related.R.Currency's CurrencyInstruments accordingly.
// Uses the global database handle and panics on error.
func (o *Instrument) SetCurrencyInstrumentsGP(insert bool, related ...*Instrument) {
	if err := o.SetCurrencyInstruments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrencyInstruments removes all previously related items of the
// instrument replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Currency's CurrencyInstruments accordingly.
// Replaces o.R.CurrencyInstruments with related.
// Sets related.R.Currency's CurrencyInstruments accordingly.
func (o *Instrument) SetCurrencyInstruments(exec boil.Executor, insert bool, related ...*Instrument) error {
	query := "update \"instruments\".\"instrument\" set \"currency_id\" = null where \"currency_id\" = $1"
	values := []interface{}{o.InstrumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CurrencyInstruments {
			rel.CurrencyID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Currency = nil
		}

		o.R.CurrencyInstruments = nil
	}
	return o.AddCurrencyInstruments(exec, insert, related...)
}

// RemoveCurrencyInstrumentsG relationships from objects passed in.
// Removes related items from R.CurrencyInstruments (uses pointer comparison, removal does not keep order)
// Sets related.R.Currency.
// Uses the global database handle.
func (o *Instrument) RemoveCurrencyInstrumentsG(related ...*Instrument) error {
	return o.RemoveCurrencyInstruments(boil.GetDB(), related...)
}

// RemoveCurrencyInstrumentsP relationships from objects passed in.
// Removes related items from R.CurrencyInstruments (uses pointer comparison, removal does not keep order)
// Sets related.R.Currency.
// Panics on error.
func (o *Instrument) RemoveCurrencyInstrumentsP(exec boil.Executor, related ...*Instrument) {
	if err := o.RemoveCurrencyInstruments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrencyInstrumentsGP relationships from objects passed in.
// Removes related items from R.CurrencyInstruments (uses pointer comparison, removal does not keep order)
// Sets related.R.Currency.
// Uses the global database handle and panics on error.
func (o *Instrument) RemoveCurrencyInstrumentsGP(related ...*Instrument) {
	if err := o.RemoveCurrencyInstruments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrencyInstruments relationships from objects passed in.
// Removes related items from R.CurrencyInstruments (uses pointer comparison, removal does not keep order)
// Sets related.R.Currency.
func (o *Instrument) RemoveCurrencyInstruments(exec boil.Executor, related ...*Instrument) error {
	var err error
	for _, rel := range related {
		rel.CurrencyID.Valid = false
		if rel.R != nil {
			rel.R.Currency = nil
		}
		if err = rel.Update(exec, "currency_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CurrencyInstruments {
			if rel != ri {
				continue
			}

			ln := len(o.R.CurrencyInstruments)
			if ln > 1 && i < ln-1 {
				o.R.CurrencyInstruments[i] = o.R.CurrencyInstruments[ln-1]
			}
			o.R.CurrencyInstruments = o.R.CurrencyInstruments[:ln-1]
			break
		}
	}

	return nil
}

// InstrumentsG retrieves all records.
func InstrumentsG(mods ...qm.QueryMod) instrumentQuery {
	return Instruments(boil.GetDB(), mods...)
}

// Instruments retrieves all the records using an executor.
func Instruments(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	mods = append(mods, qm.From("\"instruments\".\"instrument\""))
	return instrumentQuery{NewQuery(exec, mods...)}
}

// FindInstrumentG retrieves a single record by ID.
func FindInstrumentG(instrumentID int, selectCols ...string) (*Instrument, error) {
	return FindInstrument(boil.GetDB(), instrumentID, selectCols...)
}

// FindInstrumentGP retrieves a single record by ID, and panics on error.
func FindInstrumentGP(instrumentID int, selectCols ...string) *Instrument {
	retobj, err := FindInstrument(boil.GetDB(), instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInstrument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstrument(exec boil.Executor, instrumentID int, selectCols ...string) (*Instrument, error) {
	instrumentObj := &Instrument{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"instrument\" where \"instrument_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, instrumentID)

	err := q.Bind(instrumentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instrument")
	}

	return instrumentObj, nil
}

// FindInstrumentP retrieves a single record by ID with an executor, and panics on error.
func FindInstrumentP(exec boil.Executor, instrumentID int, selectCols ...string) *Instrument {
	retobj, err := FindInstrument(exec, instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Instrument) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Instrument) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Instrument) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Instrument) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	instrumentInsertCacheMut.RLock()
	cache, cached := instrumentInsertCache[key]
	instrumentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			instrumentColumns,
			instrumentColumnsWithDefault,
			instrumentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(instrumentType, instrumentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instrumentType, instrumentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"instrument\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"instrument\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instrument")
	}

	if !cached {
		instrumentInsertCacheMut.Lock()
		instrumentInsertCache[key] = cache
		instrumentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Instrument record. See Update for
// whitelist behavior description.
func (o *Instrument) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Instrument record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Instrument) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Instrument, and panics on error.
// See Update for whitelist behavior description.
func (o *Instrument) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Instrument.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Instrument) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	instrumentUpdateCacheMut.RLock()
	cache, cached := instrumentUpdateCache[key]
	instrumentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			instrumentColumns,
			instrumentPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update instrument, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instrumentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instrumentType, instrumentMapping, append(wl, instrumentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update instrument row")
	}

	if !cached {
		instrumentUpdateCacheMut.Lock()
		instrumentUpdateCache[key] = cache
		instrumentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q instrumentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q instrumentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for instrument")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InstrumentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InstrumentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InstrumentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstrumentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instrumentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in instrument slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Instrument) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Instrument) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Instrument) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Instrument) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instrumentUpsertCacheMut.RLock()
	cache, cached := instrumentUpsertCache[key]
	instrumentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			instrumentColumns,
			instrumentColumnsWithDefault,
			instrumentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			instrumentColumns,
			instrumentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert instrument, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instrumentPrimaryKeyColumns))
			copy(conflict, instrumentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"instrument\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instrumentType, instrumentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instrumentType, instrumentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instrument")
	}

	if !cached {
		instrumentUpsertCacheMut.Lock()
		instrumentUpsertCache[key] = cache
		instrumentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Instrument record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Instrument) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Instrument record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Instrument) DeleteG() error {
	if o == nil {
		return errors.New("models: no Instrument provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Instrument record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Instrument) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Instrument record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Instrument) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Instrument provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instrumentPrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"instrument\" WHERE \"instrument_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from instrument")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q instrumentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q instrumentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no instrumentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrument")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InstrumentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InstrumentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Instrument slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InstrumentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstrumentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Instrument slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(instrumentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"instrument\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrument slice")
	}

	if len(instrumentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Instrument) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Instrument) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Instrument) ReloadG() error {
	if o == nil {
		return errors.New("models: no Instrument provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Instrument) Reload(exec boil.Executor) error {
	ret, err := FindInstrument(exec, o.InstrumentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty InstrumentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	instruments := InstrumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"instrument\".* FROM \"instruments\".\"instrument\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&instruments)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstrumentSlice")
	}

	*o = instruments

	return nil
}

// InstrumentExists checks if the Instrument row exists.
func InstrumentExists(exec boil.Executor, instrumentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"instrument\" where \"instrument_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, instrumentID)
	}

	row := exec.QueryRow(sql, instrumentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instrument exists")
	}

	return exists, nil
}

// InstrumentExistsG checks if the Instrument row exists.
func InstrumentExistsG(instrumentID int) (bool, error) {
	return InstrumentExists(boil.GetDB(), instrumentID)
}

// InstrumentExistsGP checks if the Instrument row exists. Panics on error.
func InstrumentExistsGP(instrumentID int) bool {
	e, err := InstrumentExists(boil.GetDB(), instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InstrumentExistsP checks if the Instrument row exists. Panics on error.
func InstrumentExistsP(exec boil.Executor, instrumentID int) bool {
	e, err := InstrumentExists(exec, instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
