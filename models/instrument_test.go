// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInstruments(t *testing.T) {
	t.Parallel()

	query := Instruments(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInstrumentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrument.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Instruments(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentSlice{instrument}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInstrumentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InstrumentExists(tx, instrument.InstrumentID)
	if err != nil {
		t.Errorf("Unable to check if Instrument exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstrumentExistsG to return true, but got false.")
	}
}
func testInstrumentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	instrumentFound, err := FindInstrument(tx, instrument.InstrumentID)
	if err != nil {
		t.Error(err)
	}

	if instrumentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInstrumentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Instruments(tx).Bind(instrument); err != nil {
		t.Error(err)
	}
}

func testInstrumentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Instruments(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstrumentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentOne := &Instrument{}
	instrumentTwo := &Instrument{}
	if err = randomize.Struct(seed, instrumentOne, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentTwo, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Instruments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstrumentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instrumentOne := &Instrument{}
	instrumentTwo := &Instrument{}
	if err = randomize.Struct(seed, instrumentOne, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentTwo, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func instrumentBeforeInsertHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentAfterInsertHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentAfterSelectHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentBeforeUpdateHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentAfterUpdateHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentBeforeDeleteHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentAfterDeleteHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentBeforeUpsertHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func instrumentAfterUpsertHook(e boil.Executor, o *Instrument) error {
	*o = Instrument{}
	return nil
}

func testInstrumentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Instrument{}
	o := &Instrument{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instrumentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Instrument object: %s", err)
	}

	AddInstrumentHook(boil.BeforeInsertHook, instrumentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instrumentBeforeInsertHooks = []InstrumentHook{}

	AddInstrumentHook(boil.AfterInsertHook, instrumentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instrumentAfterInsertHooks = []InstrumentHook{}

	AddInstrumentHook(boil.AfterSelectHook, instrumentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instrumentAfterSelectHooks = []InstrumentHook{}

	AddInstrumentHook(boil.BeforeUpdateHook, instrumentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentBeforeUpdateHooks = []InstrumentHook{}

	AddInstrumentHook(boil.AfterUpdateHook, instrumentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentAfterUpdateHooks = []InstrumentHook{}

	AddInstrumentHook(boil.BeforeDeleteHook, instrumentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentBeforeDeleteHooks = []InstrumentHook{}

	AddInstrumentHook(boil.AfterDeleteHook, instrumentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentAfterDeleteHooks = []InstrumentHook{}

	AddInstrumentHook(boil.BeforeUpsertHook, instrumentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentBeforeUpsertHooks = []InstrumentHook{}

	AddInstrumentHook(boil.AfterUpsertHook, instrumentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentAfterUpsertHooks = []InstrumentHook{}
}
func testInstrumentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx, instrumentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentOneToOneEquityUsingEquity(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign Equity
	var local Instrument

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, equityDBTypes, true, equityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Equity struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.InstrumentID = local.InstrumentID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Equity(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InstrumentID != foreign.InstrumentID {
		t.Errorf("want: %v, got %v", foreign.InstrumentID, check.InstrumentID)
	}

	slice := InstrumentSlice{&local}
	if err = local.L.LoadEquity(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Equity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Equity = nil
	if err = local.L.LoadEquity(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Equity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstrumentOneToOneSetOpEquityUsingEquity(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Equity{&b, &c} {
		err = a.SetEquity(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Equity != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Instrument != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.InstrumentID != x.InstrumentID {
			t.Error("foreign key was wrong value", a.InstrumentID)
		}

		if exists, err := EquityExists(tx, x.InstrumentID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.InstrumentID != x.InstrumentID {
			t.Error("foreign key was wrong value", a.InstrumentID, x.InstrumentID)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testInstrumentToManyPayCurrencyEquities(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, equityDBTypes, false, equityColumnsWithDefault...)
	randomize.Struct(seed, &c, equityDBTypes, false, equityColumnsWithDefault...)

	b.PayCurrencyID.Valid = true
	c.PayCurrencyID.Valid = true
	b.PayCurrencyID.Int = a.InstrumentID
	c.PayCurrencyID.Int = a.InstrumentID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	equity, err := a.PayCurrencyEquities(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range equity {
		if v.PayCurrencyID.Int == b.PayCurrencyID.Int {
			bFound = true
		}
		if v.PayCurrencyID.Int == c.PayCurrencyID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSlice{&a}
	if err = a.L.LoadPayCurrencyEquities(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PayCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PayCurrencyEquities = nil
	if err = a.L.LoadPayCurrencyEquities(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PayCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", equity)
	}
}

func testInstrumentToManyExerciseCurrencyEquities(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, equityDBTypes, false, equityColumnsWithDefault...)
	randomize.Struct(seed, &c, equityDBTypes, false, equityColumnsWithDefault...)

	b.ExerciseCurrencyID.Valid = true
	c.ExerciseCurrencyID.Valid = true
	b.ExerciseCurrencyID.Int = a.InstrumentID
	c.ExerciseCurrencyID.Int = a.InstrumentID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	equity, err := a.ExerciseCurrencyEquities(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range equity {
		if v.ExerciseCurrencyID.Int == b.ExerciseCurrencyID.Int {
			bFound = true
		}
		if v.ExerciseCurrencyID.Int == c.ExerciseCurrencyID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSlice{&a}
	if err = a.L.LoadExerciseCurrencyEquities(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExerciseCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ExerciseCurrencyEquities = nil
	if err = a.L.LoadExerciseCurrencyEquities(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExerciseCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", equity)
	}
}

func testInstrumentToManyCompanyCurrencyEquities(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, equityDBTypes, false, equityColumnsWithDefault...)
	randomize.Struct(seed, &c, equityDBTypes, false, equityColumnsWithDefault...)

	b.CompanyCurrencyID.Valid = true
	c.CompanyCurrencyID.Valid = true
	b.CompanyCurrencyID.Int = a.InstrumentID
	c.CompanyCurrencyID.Int = a.InstrumentID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	equity, err := a.CompanyCurrencyEquities(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range equity {
		if v.CompanyCurrencyID.Int == b.CompanyCurrencyID.Int {
			bFound = true
		}
		if v.CompanyCurrencyID.Int == c.CompanyCurrencyID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSlice{&a}
	if err = a.L.LoadCompanyCurrencyEquities(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompanyCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompanyCurrencyEquities = nil
	if err = a.L.LoadCompanyCurrencyEquities(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompanyCurrencyEquities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", equity)
	}
}

func testInstrumentToManyInstitutionRoles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c InstitutionRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...)
	randomize.Struct(seed, &c, institutionRoleDBTypes, false, institutionRoleColumnsWithDefault...)

	b.InstrumentID = a.InstrumentID
	c.InstrumentID = a.InstrumentID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	institutionRole, err := a.InstitutionRoles(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range institutionRole {
		if v.InstrumentID == b.InstrumentID {
			bFound = true
		}
		if v.InstrumentID == c.InstrumentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSlice{&a}
	if err = a.L.LoadInstitutionRoles(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InstitutionRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InstitutionRoles = nil
	if err = a.L.LoadInstitutionRoles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InstitutionRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", institutionRole)
	}
}

func testInstrumentToManyCurrencyInstruments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, instrumentDBTypes, false, instrumentColumnsWithDefault...)
	randomize.Struct(seed, &c, instrumentDBTypes, false, instrumentColumnsWithDefault...)

	b.CurrencyID.Valid = true
	c.CurrencyID.Valid = true
	b.CurrencyID.Int = a.InstrumentID
	c.CurrencyID.Int = a.InstrumentID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	instrument, err := a.CurrencyInstruments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range instrument {
		if v.CurrencyID.Int == b.CurrencyID.Int {
			bFound = true
		}
		if v.CurrencyID.Int == c.CurrencyID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSlice{&a}
	if err = a.L.LoadCurrencyInstruments(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrencyInstruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CurrencyInstruments = nil
	if err = a.L.LoadCurrencyInstruments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrencyInstruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", instrument)
	}
}

func testInstrumentToManyAddOpPayCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Equity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPayCurrencyEquities(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentID != first.PayCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, first.PayCurrencyID.Int)
		}
		if a.InstrumentID != second.PayCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, second.PayCurrencyID.Int)
		}

		if first.R.PayCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PayCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PayCurrencyEquities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PayCurrencyEquities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PayCurrencyEquities(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentToManySetOpPayCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetPayCurrencyEquities(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PayCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPayCurrencyEquities(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PayCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PayCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PayCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.InstrumentID != d.PayCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, d.PayCurrencyID.Int)
	}
	if a.InstrumentID != e.PayCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, e.PayCurrencyID.Int)
	}

	if b.R.PayCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PayCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PayCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PayCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PayCurrencyEquities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PayCurrencyEquities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInstrumentToManyRemoveOpPayCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddPayCurrencyEquities(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PayCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePayCurrencyEquities(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PayCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PayCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PayCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PayCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PayCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PayCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PayCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PayCurrencyEquities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PayCurrencyEquities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PayCurrencyEquities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInstrumentToManyAddOpExerciseCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Equity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExerciseCurrencyEquities(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentID != first.ExerciseCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, first.ExerciseCurrencyID.Int)
		}
		if a.InstrumentID != second.ExerciseCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, second.ExerciseCurrencyID.Int)
		}

		if first.R.ExerciseCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ExerciseCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ExerciseCurrencyEquities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ExerciseCurrencyEquities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ExerciseCurrencyEquities(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentToManySetOpExerciseCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetExerciseCurrencyEquities(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ExerciseCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetExerciseCurrencyEquities(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ExerciseCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.ExerciseCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.ExerciseCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.InstrumentID != d.ExerciseCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, d.ExerciseCurrencyID.Int)
	}
	if a.InstrumentID != e.ExerciseCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, e.ExerciseCurrencyID.Int)
	}

	if b.R.ExerciseCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ExerciseCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ExerciseCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ExerciseCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ExerciseCurrencyEquities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ExerciseCurrencyEquities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInstrumentToManyRemoveOpExerciseCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddExerciseCurrencyEquities(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ExerciseCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveExerciseCurrencyEquities(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ExerciseCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.ExerciseCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.ExerciseCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ExerciseCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ExerciseCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ExerciseCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ExerciseCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ExerciseCurrencyEquities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ExerciseCurrencyEquities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ExerciseCurrencyEquities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInstrumentToManyAddOpCompanyCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Equity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompanyCurrencyEquities(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentID != first.CompanyCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, first.CompanyCurrencyID.Int)
		}
		if a.InstrumentID != second.CompanyCurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, second.CompanyCurrencyID.Int)
		}

		if first.R.CompanyCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CompanyCurrency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompanyCurrencyEquities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompanyCurrencyEquities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompanyCurrencyEquities(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentToManySetOpCompanyCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetCompanyCurrencyEquities(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CompanyCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCompanyCurrencyEquities(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CompanyCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CompanyCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CompanyCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.InstrumentID != d.CompanyCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, d.CompanyCurrencyID.Int)
	}
	if a.InstrumentID != e.CompanyCurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, e.CompanyCurrencyID.Int)
	}

	if b.R.CompanyCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CompanyCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CompanyCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CompanyCurrency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CompanyCurrencyEquities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CompanyCurrencyEquities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInstrumentToManyRemoveOpCompanyCurrencyEquities(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Equity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Equity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, equityDBTypes, false, strmangle.SetComplement(equityPrimaryKeyColumns, equityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddCompanyCurrencyEquities(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CompanyCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCompanyCurrencyEquities(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CompanyCurrencyEquities(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CompanyCurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CompanyCurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CompanyCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CompanyCurrency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CompanyCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CompanyCurrency != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CompanyCurrencyEquities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CompanyCurrencyEquities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CompanyCurrencyEquities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInstrumentToManyAddOpInstitutionRoles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e InstitutionRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InstitutionRole{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, institutionRoleDBTypes, false, strmangle.SetComplement(institutionRolePrimaryKeyColumns, institutionRoleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InstitutionRole{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInstitutionRoles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentID != first.InstrumentID {
			t.Error("foreign key was wrong value", a.InstrumentID, first.InstrumentID)
		}
		if a.InstrumentID != second.InstrumentID {
			t.Error("foreign key was wrong value", a.InstrumentID, second.InstrumentID)
		}

		if first.R.Instrument != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Instrument != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InstitutionRoles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InstitutionRoles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InstitutionRoles(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testInstrumentToManyAddOpCurrencyInstruments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Instrument{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Instrument{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCurrencyInstruments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InstrumentID != first.CurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, first.CurrencyID.Int)
		}
		if a.InstrumentID != second.CurrencyID.Int {
			t.Error("foreign key was wrong value", a.InstrumentID, second.CurrencyID.Int)
		}

		if first.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Currency != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CurrencyInstruments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CurrencyInstruments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CurrencyInstruments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentToManySetOpCurrencyInstruments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Instrument{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetCurrencyInstruments(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CurrencyInstruments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCurrencyInstruments(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CurrencyInstruments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.InstrumentID != d.CurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, d.CurrencyID.Int)
	}
	if a.InstrumentID != e.CurrencyID.Int {
		t.Error("foreign key was wrong value", a.InstrumentID, e.CurrencyID.Int)
	}

	if b.R.Currency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Currency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Currency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Currency != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CurrencyInstruments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CurrencyInstruments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInstrumentToManyRemoveOpCurrencyInstruments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c, d, e Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Instrument{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddCurrencyInstruments(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CurrencyInstruments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCurrencyInstruments(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CurrencyInstruments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CurrencyID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CurrencyID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Currency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Currency != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Currency != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Currency != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CurrencyInstruments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CurrencyInstruments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CurrencyInstruments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInstrumentToOneInstrumentClassUsingInstrumentClass(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Instrument
	var foreign InstrumentClass

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, instrumentClassDBTypes, false, instrumentClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentClass struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.InstrumentClassID = foreign.InstrumentClassID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.InstrumentClass(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InstrumentClassID != foreign.InstrumentClassID {
		t.Errorf("want: %v, got %v", foreign.InstrumentClassID, check.InstrumentClassID)
	}

	slice := InstrumentSlice{&local}
	if err = local.L.LoadInstrumentClass(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.InstrumentClass == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InstrumentClass = nil
	if err = local.L.LoadInstrumentClass(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.InstrumentClass == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstrumentToOneInstrumentUsingCurrency(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Instrument
	var foreign Instrument

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	local.CurrencyID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CurrencyID.Int = foreign.InstrumentID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Currency(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.InstrumentID != foreign.InstrumentID {
		t.Errorf("want: %v, got %v", foreign.InstrumentID, check.InstrumentID)
	}

	slice := InstrumentSlice{&local}
	if err = local.L.LoadCurrency(tx, false, (*[]*Instrument)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Currency = nil
	if err = local.L.LoadCurrency(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstrumentToOneSetOpInstrumentClassUsingInstrumentClass(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c InstrumentClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentClassDBTypes, false, strmangle.SetComplement(instrumentClassPrimaryKeyColumns, instrumentClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, instrumentClassDBTypes, false, strmangle.SetComplement(instrumentClassPrimaryKeyColumns, instrumentClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*InstrumentClass{&b, &c} {
		err = a.SetInstrumentClass(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InstrumentClass != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Instruments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InstrumentClassID != x.InstrumentClassID {
			t.Error("foreign key was wrong value", a.InstrumentClassID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InstrumentClassID))
		reflect.Indirect(reflect.ValueOf(&a.InstrumentClassID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InstrumentClassID != x.InstrumentClassID {
			t.Error("foreign key was wrong value", a.InstrumentClassID, x.InstrumentClassID)
		}
	}
}
func testInstrumentToOneSetOpInstrumentUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Instrument{&b, &c} {
		err = a.SetCurrency(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Currency != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrencyInstruments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CurrencyID.Int != x.InstrumentID {
			t.Error("foreign key was wrong value", a.CurrencyID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrencyID.Int))
		reflect.Indirect(reflect.ValueOf(&a.CurrencyID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CurrencyID.Int != x.InstrumentID {
			t.Error("foreign key was wrong value", a.CurrencyID.Int, x.InstrumentID)
		}
	}
}

func testInstrumentToOneRemoveOpInstrumentUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Instrument
	var b Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCurrency(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCurrency(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Currency(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Currency != nil {
		t.Error("R struct entry should be nil")
	}

	if a.CurrencyID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CurrencyInstruments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInstrumentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrument.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentSlice{instrument}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInstrumentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Instruments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instrumentDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `CreatedBy`: `character varying`, `CurrencyID`: `integer`, `Description`: `character varying`, `FromDate`: `timestamp without time zone`, `InstrumentClassID`: `smallint`, `InstrumentID`: `integer`, `Name`: `character varying`, `Symbol`: `character varying`, `ThruDate`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `UpdatedBy`: `character varying`}
	_                 = bytes.MinRead
)

func testInstrumentsUpdate(t *testing.T) {
	t.Parallel()

	if len(instrumentColumns) == len(instrumentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err = instrument.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instrumentColumns) == len(instrumentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrument := &Instrument{}
	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrument, instrumentDBTypes, true, instrumentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instrumentColumns, instrumentPrimaryKeyColumns) {
		fields = instrumentColumns
	} else {
		fields = strmangle.SetComplement(
			instrumentColumns,
			instrumentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(instrument))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InstrumentSlice{instrument}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInstrumentsUpsert(t *testing.T) {
	t.Parallel()

	if len(instrumentColumns) == len(instrumentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	instrument := Instrument{}
	if err = randomize.Struct(seed, &instrument, instrumentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrument.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Instrument: %s", err)
	}

	count, err := Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &instrument, instrumentDBTypes, false, instrumentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	if err = instrument.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Instrument: %s", err)
	}

	count, err = Instruments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
