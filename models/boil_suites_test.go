// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Equities", testEquities)
	t.Run("Institutions", testInstitutions)
	t.Run("InstitutionRoles", testInstitutionRoles)
	t.Run("Instruments", testInstruments)
	t.Run("InstrumentClasses", testInstrumentClasses)
}

func TestDelete(t *testing.T) {
	t.Run("Equities", testEquitiesDelete)
	t.Run("Institutions", testInstitutionsDelete)
	t.Run("InstitutionRoles", testInstitutionRolesDelete)
	t.Run("Instruments", testInstrumentsDelete)
	t.Run("InstrumentClasses", testInstrumentClassesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Equities", testEquitiesQueryDeleteAll)
	t.Run("Institutions", testInstitutionsQueryDeleteAll)
	t.Run("InstitutionRoles", testInstitutionRolesQueryDeleteAll)
	t.Run("Instruments", testInstrumentsQueryDeleteAll)
	t.Run("InstrumentClasses", testInstrumentClassesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Equities", testEquitiesSliceDeleteAll)
	t.Run("Institutions", testInstitutionsSliceDeleteAll)
	t.Run("InstitutionRoles", testInstitutionRolesSliceDeleteAll)
	t.Run("Instruments", testInstrumentsSliceDeleteAll)
	t.Run("InstrumentClasses", testInstrumentClassesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Equities", testEquitiesExists)
	t.Run("Institutions", testInstitutionsExists)
	t.Run("InstitutionRoles", testInstitutionRolesExists)
	t.Run("Instruments", testInstrumentsExists)
	t.Run("InstrumentClasses", testInstrumentClassesExists)
}

func TestFind(t *testing.T) {
	t.Run("Equities", testEquitiesFind)
	t.Run("Institutions", testInstitutionsFind)
	t.Run("InstitutionRoles", testInstitutionRolesFind)
	t.Run("Instruments", testInstrumentsFind)
	t.Run("InstrumentClasses", testInstrumentClassesFind)
}

func TestBind(t *testing.T) {
	t.Run("Equities", testEquitiesBind)
	t.Run("Institutions", testInstitutionsBind)
	t.Run("InstitutionRoles", testInstitutionRolesBind)
	t.Run("Instruments", testInstrumentsBind)
	t.Run("InstrumentClasses", testInstrumentClassesBind)
}

func TestOne(t *testing.T) {
	t.Run("Equities", testEquitiesOne)
	t.Run("Institutions", testInstitutionsOne)
	t.Run("InstitutionRoles", testInstitutionRolesOne)
	t.Run("Instruments", testInstrumentsOne)
	t.Run("InstrumentClasses", testInstrumentClassesOne)
}

func TestAll(t *testing.T) {
	t.Run("Equities", testEquitiesAll)
	t.Run("Institutions", testInstitutionsAll)
	t.Run("InstitutionRoles", testInstitutionRolesAll)
	t.Run("Instruments", testInstrumentsAll)
	t.Run("InstrumentClasses", testInstrumentClassesAll)
}

func TestCount(t *testing.T) {
	t.Run("Equities", testEquitiesCount)
	t.Run("Institutions", testInstitutionsCount)
	t.Run("InstitutionRoles", testInstitutionRolesCount)
	t.Run("Instruments", testInstrumentsCount)
	t.Run("InstrumentClasses", testInstrumentClassesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Equities", testEquitiesHooks)
	t.Run("Institutions", testInstitutionsHooks)
	t.Run("InstitutionRoles", testInstitutionRolesHooks)
	t.Run("Instruments", testInstrumentsHooks)
	t.Run("InstrumentClasses", testInstrumentClassesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Equities", testEquitiesInsert)
	t.Run("Equities", testEquitiesInsertWhitelist)
	t.Run("Institutions", testInstitutionsInsert)
	t.Run("Institutions", testInstitutionsInsertWhitelist)
	t.Run("InstitutionRoles", testInstitutionRolesInsert)
	t.Run("InstitutionRoles", testInstitutionRolesInsertWhitelist)
	t.Run("Instruments", testInstrumentsInsert)
	t.Run("Instruments", testInstrumentsInsertWhitelist)
	t.Run("InstrumentClasses", testInstrumentClassesInsert)
	t.Run("InstrumentClasses", testInstrumentClassesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("EquityToInstrumentUsingInstrument", testEquityToOneInstrumentUsingInstrument)
	t.Run("EquityToInstrumentUsingPayCurrency", testEquityToOneInstrumentUsingPayCurrency)
	t.Run("EquityToInstrumentUsingExerciseCurrency", testEquityToOneInstrumentUsingExerciseCurrency)
	t.Run("EquityToInstrumentUsingCompanyCurrency", testEquityToOneInstrumentUsingCompanyCurrency)
	t.Run("InstitutionRoleToInstitutionUsingInstitution", testInstitutionRoleToOneInstitutionUsingInstitution)
	t.Run("InstitutionRoleToInstrumentUsingInstrument", testInstitutionRoleToOneInstrumentUsingInstrument)
	t.Run("InstrumentToInstrumentClassUsingInstrumentClass", testInstrumentToOneInstrumentClassUsingInstrumentClass)
	t.Run("InstrumentToInstrumentUsingCurrency", testInstrumentToOneInstrumentUsingCurrency)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("InstrumentToEquityUsingEquity", testInstrumentOneToOneEquityUsingEquity)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("InstitutionToInstitutionRoles", testInstitutionToManyInstitutionRoles)
	t.Run("InstrumentToPayCurrencyEquities", testInstrumentToManyPayCurrencyEquities)
	t.Run("InstrumentToExerciseCurrencyEquities", testInstrumentToManyExerciseCurrencyEquities)
	t.Run("InstrumentToCompanyCurrencyEquities", testInstrumentToManyCompanyCurrencyEquities)
	t.Run("InstrumentToInstitutionRoles", testInstrumentToManyInstitutionRoles)
	t.Run("InstrumentToCurrencyInstruments", testInstrumentToManyCurrencyInstruments)
	t.Run("InstrumentClassToInstruments", testInstrumentClassToManyInstruments)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("EquityToInstrumentUsingInstrument", testEquityToOneSetOpInstrumentUsingInstrument)
	t.Run("EquityToInstrumentUsingPayCurrency", testEquityToOneSetOpInstrumentUsingPayCurrency)
	t.Run("EquityToInstrumentUsingExerciseCurrency", testEquityToOneSetOpInstrumentUsingExerciseCurrency)
	t.Run("EquityToInstrumentUsingCompanyCurrency", testEquityToOneSetOpInstrumentUsingCompanyCurrency)
	t.Run("InstitutionRoleToInstitutionUsingInstitution", testInstitutionRoleToOneSetOpInstitutionUsingInstitution)
	t.Run("InstitutionRoleToInstrumentUsingInstrument", testInstitutionRoleToOneSetOpInstrumentUsingInstrument)
	t.Run("InstrumentToInstrumentClassUsingInstrumentClass", testInstrumentToOneSetOpInstrumentClassUsingInstrumentClass)
	t.Run("InstrumentToInstrumentUsingCurrency", testInstrumentToOneSetOpInstrumentUsingCurrency)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("EquityToInstrumentUsingPayCurrency", testEquityToOneRemoveOpInstrumentUsingPayCurrency)
	t.Run("EquityToInstrumentUsingExerciseCurrency", testEquityToOneRemoveOpInstrumentUsingExerciseCurrency)
	t.Run("EquityToInstrumentUsingCompanyCurrency", testEquityToOneRemoveOpInstrumentUsingCompanyCurrency)
	t.Run("InstrumentToInstrumentUsingCurrency", testInstrumentToOneRemoveOpInstrumentUsingCurrency)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("InstrumentToEquityUsingEquity", testInstrumentOneToOneSetOpEquityUsingEquity)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("InstitutionToInstitutionRoles", testInstitutionToManyAddOpInstitutionRoles)
	t.Run("InstrumentToPayCurrencyEquities", testInstrumentToManyAddOpPayCurrencyEquities)
	t.Run("InstrumentToExerciseCurrencyEquities", testInstrumentToManyAddOpExerciseCurrencyEquities)
	t.Run("InstrumentToCompanyCurrencyEquities", testInstrumentToManyAddOpCompanyCurrencyEquities)
	t.Run("InstrumentToInstitutionRoles", testInstrumentToManyAddOpInstitutionRoles)
	t.Run("InstrumentToCurrencyInstruments", testInstrumentToManyAddOpCurrencyInstruments)
	t.Run("InstrumentClassToInstruments", testInstrumentClassToManyAddOpInstruments)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("InstrumentToPayCurrencyEquities", testInstrumentToManySetOpPayCurrencyEquities)
	t.Run("InstrumentToExerciseCurrencyEquities", testInstrumentToManySetOpExerciseCurrencyEquities)
	t.Run("InstrumentToCompanyCurrencyEquities", testInstrumentToManySetOpCompanyCurrencyEquities)
	t.Run("InstrumentToCurrencyInstruments", testInstrumentToManySetOpCurrencyInstruments)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("InstrumentToPayCurrencyEquities", testInstrumentToManyRemoveOpPayCurrencyEquities)
	t.Run("InstrumentToExerciseCurrencyEquities", testInstrumentToManyRemoveOpExerciseCurrencyEquities)
	t.Run("InstrumentToCompanyCurrencyEquities", testInstrumentToManyRemoveOpCompanyCurrencyEquities)
	t.Run("InstrumentToCurrencyInstruments", testInstrumentToManyRemoveOpCurrencyInstruments)
}

func TestReload(t *testing.T) {
	t.Run("Equities", testEquitiesReload)
	t.Run("Institutions", testInstitutionsReload)
	t.Run("InstitutionRoles", testInstitutionRolesReload)
	t.Run("Instruments", testInstrumentsReload)
	t.Run("InstrumentClasses", testInstrumentClassesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Equities", testEquitiesReloadAll)
	t.Run("Institutions", testInstitutionsReloadAll)
	t.Run("InstitutionRoles", testInstitutionRolesReloadAll)
	t.Run("Instruments", testInstrumentsReloadAll)
	t.Run("InstrumentClasses", testInstrumentClassesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Equities", testEquitiesSelect)
	t.Run("Institutions", testInstitutionsSelect)
	t.Run("InstitutionRoles", testInstitutionRolesSelect)
	t.Run("Instruments", testInstrumentsSelect)
	t.Run("InstrumentClasses", testInstrumentClassesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Equities", testEquitiesUpdate)
	t.Run("Institutions", testInstitutionsUpdate)
	t.Run("InstitutionRoles", testInstitutionRolesUpdate)
	t.Run("Instruments", testInstrumentsUpdate)
	t.Run("InstrumentClasses", testInstrumentClassesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Equities", testEquitiesSliceUpdateAll)
	t.Run("Institutions", testInstitutionsSliceUpdateAll)
	t.Run("InstitutionRoles", testInstitutionRolesSliceUpdateAll)
	t.Run("Instruments", testInstrumentsSliceUpdateAll)
	t.Run("InstrumentClasses", testInstrumentClassesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Equities", testEquitiesUpsert)
	t.Run("Institutions", testInstitutionsUpsert)
	t.Run("InstitutionRoles", testInstitutionRolesUpsert)
	t.Run("Instruments", testInstrumentsUpsert)
	t.Run("InstrumentClasses", testInstrumentClassesUpsert)
}
