// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Equity is an object representing the database table.
type Equity struct {
	InstrumentID       int       `boil:"instrument_id" json:"instrument_id" toml:"instrument_id" yaml:"instrument_id"`
	PayCurrencyID      null.Int  `boil:"pay_currency_id" json:"pay_currency_id,omitempty" toml:"pay_currency_id" yaml:"pay_currency_id,omitempty"`
	ExerciseCurrencyID null.Int  `boil:"exercise_currency_id" json:"exercise_currency_id,omitempty" toml:"exercise_currency_id" yaml:"exercise_currency_id,omitempty"`
	CompanyCurrencyID  null.Int  `boil:"company_currency_id" json:"company_currency_id,omitempty" toml:"company_currency_id" yaml:"company_currency_id,omitempty"`
	FromDate           time.Time `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ThruDate           null.Time `boil:"thru_date" json:"thru_date,omitempty" toml:"thru_date" yaml:"thru_date,omitempty"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy          string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy          string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *equityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L equityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EquityColumns = struct {
	InstrumentID       string
	PayCurrencyID      string
	ExerciseCurrencyID string
	CompanyCurrencyID  string
	FromDate           string
	ThruDate           string
	CreatedAt          string
	CreatedBy          string
	UpdatedAt          string
	UpdatedBy          string
}{
	InstrumentID:       "instrument_id",
	PayCurrencyID:      "pay_currency_id",
	ExerciseCurrencyID: "exercise_currency_id",
	CompanyCurrencyID:  "company_currency_id",
	FromDate:           "from_date",
	ThruDate:           "thru_date",
	CreatedAt:          "created_at",
	CreatedBy:          "created_by",
	UpdatedAt:          "updated_at",
	UpdatedBy:          "updated_by",
}

// equityR is where relationships are stored.
type equityR struct {
	Instrument       *Instrument
	PayCurrency      *Instrument
	ExerciseCurrency *Instrument
	CompanyCurrency  *Instrument
}

// equityL is where Load methods for each relationship are stored.
type equityL struct{}

var (
	equityColumns               = []string{"instrument_id", "pay_currency_id", "exercise_currency_id", "company_currency_id", "from_date", "thru_date", "created_at", "created_by", "updated_at", "updated_by"}
	equityColumnsWithoutDefault = []string{"pay_currency_id", "exercise_currency_id", "company_currency_id", "from_date", "thru_date", "created_by", "updated_by"}
	equityColumnsWithDefault    = []string{"instrument_id", "created_at", "updated_at"}
	equityPrimaryKeyColumns     = []string{"instrument_id"}
)

type (
	// EquitySlice is an alias for a slice of pointers to Equity.
	// This should generally be used opposed to []Equity.
	EquitySlice []*Equity
	// EquityHook is the signature for custom Equity hook methods
	EquityHook func(boil.Executor, *Equity) error

	equityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	equityType                 = reflect.TypeOf(&Equity{})
	equityMapping              = queries.MakeStructMapping(equityType)
	equityPrimaryKeyMapping, _ = queries.BindMapping(equityType, equityMapping, equityPrimaryKeyColumns)
	equityInsertCacheMut       sync.RWMutex
	equityInsertCache          = make(map[string]insertCache)
	equityUpdateCacheMut       sync.RWMutex
	equityUpdateCache          = make(map[string]updateCache)
	equityUpsertCacheMut       sync.RWMutex
	equityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var equityBeforeInsertHooks []EquityHook
var equityBeforeUpdateHooks []EquityHook
var equityBeforeDeleteHooks []EquityHook
var equityBeforeUpsertHooks []EquityHook

var equityAfterInsertHooks []EquityHook
var equityAfterSelectHooks []EquityHook
var equityAfterUpdateHooks []EquityHook
var equityAfterDeleteHooks []EquityHook
var equityAfterUpsertHooks []EquityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Equity) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range equityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Equity) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range equityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Equity) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range equityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Equity) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range equityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Equity) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range equityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Equity) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range equityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Equity) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range equityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Equity) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range equityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Equity) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range equityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEquityHook registers your hook function for all future operations.
func AddEquityHook(hookPoint boil.HookPoint, equityHook EquityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		equityBeforeInsertHooks = append(equityBeforeInsertHooks, equityHook)
	case boil.BeforeUpdateHook:
		equityBeforeUpdateHooks = append(equityBeforeUpdateHooks, equityHook)
	case boil.BeforeDeleteHook:
		equityBeforeDeleteHooks = append(equityBeforeDeleteHooks, equityHook)
	case boil.BeforeUpsertHook:
		equityBeforeUpsertHooks = append(equityBeforeUpsertHooks, equityHook)
	case boil.AfterInsertHook:
		equityAfterInsertHooks = append(equityAfterInsertHooks, equityHook)
	case boil.AfterSelectHook:
		equityAfterSelectHooks = append(equityAfterSelectHooks, equityHook)
	case boil.AfterUpdateHook:
		equityAfterUpdateHooks = append(equityAfterUpdateHooks, equityHook)
	case boil.AfterDeleteHook:
		equityAfterDeleteHooks = append(equityAfterDeleteHooks, equityHook)
	case boil.AfterUpsertHook:
		equityAfterUpsertHooks = append(equityAfterUpsertHooks, equityHook)
	}
}

// OneP returns a single equity record from the query, and panics on error.
func (q equityQuery) OneP() *Equity {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single equity record from the query.
func (q equityQuery) One() (*Equity, error) {
	o := &Equity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for equity")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Equity records from the query, and panics on error.
func (q equityQuery) AllP() EquitySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Equity records from the query.
func (q equityQuery) All() (EquitySlice, error) {
	var o []*Equity

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Equity slice")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Equity records in the query, and panics on error.
func (q equityQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Equity records in the query.
func (q equityQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count equity rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q equityQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q equityQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if equity exists")
	}

	return count > 0, nil
}

// InstrumentG pointed to by the foreign key.
func (o *Equity) InstrumentG(mods ...qm.QueryMod) instrumentQuery {
	return o.Instrument(boil.GetDB(), mods...)
}

// Instrument pointed to by the foreign key.
func (o *Equity) Instrument(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.InstrumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
}

// PayCurrencyG pointed to by the foreign key.
func (o *Equity) PayCurrencyG(mods ...qm.QueryMod) instrumentQuery {
	return o.PayCurrency(boil.GetDB(), mods...)
}

// PayCurrency pointed to by the foreign key.
func (o *Equity) PayCurrency(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.PayCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
}

// ExerciseCurrencyG pointed to by the foreign key.
func (o *Equity) ExerciseCurrencyG(mods ...qm.QueryMod) instrumentQuery {
	return o.ExerciseCurrency(boil.GetDB(), mods...)
}

// ExerciseCurrency pointed to by the foreign key.
func (o *Equity) ExerciseCurrency(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.ExerciseCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
}

// CompanyCurrencyG pointed to by the foreign key.
func (o *Equity) CompanyCurrencyG(mods ...qm.QueryMod) instrumentQuery {
	return o.CompanyCurrency(boil.GetDB(), mods...)
}

// CompanyCurrency pointed to by the foreign key.
func (o *Equity) CompanyCurrency(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.CompanyCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
} // LoadInstrument allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (equityL) LoadInstrument(e boil.Executor, singular bool, maybeEquity interface{}) error {
	var slice []*Equity
	var object *Equity

	count := 1
	if singular {
		object = maybeEquity.(*Equity)
	} else {
		slice = *maybeEquity.(*[]*Equity)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &equityR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &equityR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Instrument = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstrumentID == foreign.InstrumentID {
				local.R.Instrument = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (equityL) LoadPayCurrency(e boil.Executor, singular bool, maybeEquity interface{}) error {
	var slice []*Equity
	var object *Equity

	count := 1
	if singular {
		object = maybeEquity.(*Equity)
	} else {
		slice = *maybeEquity.(*[]*Equity)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &equityR{}
		}
		args[0] = object.PayCurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &equityR{}
			}
			args[i] = obj.PayCurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.PayCurrency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayCurrencyID.Int == foreign.InstrumentID {
				local.R.PayCurrency = foreign
				break
			}
		}
	}

	return nil
}

// LoadExerciseCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (equityL) LoadExerciseCurrency(e boil.Executor, singular bool, maybeEquity interface{}) error {
	var slice []*Equity
	var object *Equity

	count := 1
	if singular {
		object = maybeEquity.(*Equity)
	} else {
		slice = *maybeEquity.(*[]*Equity)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &equityR{}
		}
		args[0] = object.ExerciseCurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &equityR{}
			}
			args[i] = obj.ExerciseCurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ExerciseCurrency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExerciseCurrencyID.Int == foreign.InstrumentID {
				local.R.ExerciseCurrency = foreign
				break
			}
		}
	}

	return nil
}

// LoadCompanyCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (equityL) LoadCompanyCurrency(e boil.Executor, singular bool, maybeEquity interface{}) error {
	var slice []*Equity
	var object *Equity

	count := 1
	if singular {
		object = maybeEquity.(*Equity)
	} else {
		slice = *maybeEquity.(*[]*Equity)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &equityR{}
		}
		args[0] = object.CompanyCurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &equityR{}
			}
			args[i] = obj.CompanyCurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(equityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.CompanyCurrency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyCurrencyID.Int == foreign.InstrumentID {
				local.R.CompanyCurrency = foreign
				break
			}
		}
	}

	return nil
}

// SetInstrumentG of the equity to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.Equity.
// Uses the global database handle.
func (o *Equity) SetInstrumentG(insert bool, related *Instrument) error {
	return o.SetInstrument(boil.GetDB(), insert, related)
}

// SetInstrumentP of the equity to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.Equity.
// Panics on error.
func (o *Equity) SetInstrumentP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetInstrument(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrumentGP of the equity to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.Equity.
// Uses the global database handle and panics on error.
func (o *Equity) SetInstrumentGP(insert bool, related *Instrument) {
	if err := o.SetInstrument(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrument of the equity to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.Equity.
func (o *Equity) SetInstrument(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_id"}),
		strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstrumentID = related.InstrumentID

	if o.R == nil {
		o.R = &equityR{
			Instrument: related,
		}
	} else {
		o.R.Instrument = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			Equity: o,
		}
	} else {
		related.R.Equity = o
	}

	return nil
}

// SetPayCurrencyG of the equity to the related item.
// Sets o.R.PayCurrency to related.
// Adds o to related.R.PayCurrencyEquities.
// Uses the global database handle.
func (o *Equity) SetPayCurrencyG(insert bool, related *Instrument) error {
	return o.SetPayCurrency(boil.GetDB(), insert, related)
}

// SetPayCurrencyP of the equity to the related item.
// Sets o.R.PayCurrency to related.
// Adds o to related.R.PayCurrencyEquities.
// Panics on error.
func (o *Equity) SetPayCurrencyP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetPayCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayCurrencyGP of the equity to the related item.
// Sets o.R.PayCurrency to related.
// Adds o to related.R.PayCurrencyEquities.
// Uses the global database handle and panics on error.
func (o *Equity) SetPayCurrencyGP(insert bool, related *Instrument) {
	if err := o.SetPayCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayCurrency of the equity to the related item.
// Sets o.R.PayCurrency to related.
// Adds o to related.R.PayCurrencyEquities.
func (o *Equity) SetPayCurrency(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pay_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayCurrencyID.Int = related.InstrumentID
	o.PayCurrencyID.Valid = true

	if o.R == nil {
		o.R = &equityR{
			PayCurrency: related,
		}
	} else {
		o.R.PayCurrency = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			PayCurrencyEquities: EquitySlice{o},
		}
	} else {
		related.R.PayCurrencyEquities = append(related.R.PayCurrencyEquities, o)
	}

	return nil
}

// RemovePayCurrencyG relationship.
// Sets o.R.PayCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Equity) RemovePayCurrencyG(related *Instrument) error {
	return o.RemovePayCurrency(boil.GetDB(), related)
}

// RemovePayCurrencyP relationship.
// Sets o.R.PayCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Equity) RemovePayCurrencyP(exec boil.Executor, related *Instrument) {
	if err := o.RemovePayCurrency(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayCurrencyGP relationship.
// Sets o.R.PayCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Equity) RemovePayCurrencyGP(related *Instrument) {
	if err := o.RemovePayCurrency(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayCurrency relationship.
// Sets o.R.PayCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Equity) RemovePayCurrency(exec boil.Executor, related *Instrument) error {
	var err error

	o.PayCurrencyID.Valid = false
	if err = o.Update(exec, "pay_currency_id"); err != nil {
		o.PayCurrencyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.PayCurrency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PayCurrencyEquities {
		if o.PayCurrencyID.Int != ri.PayCurrencyID.Int {
			continue
		}

		ln := len(related.R.PayCurrencyEquities)
		if ln > 1 && i < ln-1 {
			related.R.PayCurrencyEquities[i] = related.R.PayCurrencyEquities[ln-1]
		}
		related.R.PayCurrencyEquities = related.R.PayCurrencyEquities[:ln-1]
		break
	}
	return nil
}

// SetExerciseCurrencyG of the equity to the related item.
// Sets o.R.ExerciseCurrency to related.
// Adds o to related.R.ExerciseCurrencyEquities.
// Uses the global database handle.
func (o *Equity) SetExerciseCurrencyG(insert bool, related *Instrument) error {
	return o.SetExerciseCurrency(boil.GetDB(), insert, related)
}

// SetExerciseCurrencyP of the equity to the related item.
// Sets o.R.ExerciseCurrency to related.
// Adds o to related.R.ExerciseCurrencyEquities.
// Panics on error.
func (o *Equity) SetExerciseCurrencyP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetExerciseCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExerciseCurrencyGP of the equity to the related item.
// Sets o.R.ExerciseCurrency to related.
// Adds o to related.R.ExerciseCurrencyEquities.
// Uses the global database handle and panics on error.
func (o *Equity) SetExerciseCurrencyGP(insert bool, related *Instrument) {
	if err := o.SetExerciseCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExerciseCurrency of the equity to the related item.
// Sets o.R.ExerciseCurrency to related.
// Adds o to related.R.ExerciseCurrencyEquities.
func (o *Equity) SetExerciseCurrency(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exercise_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExerciseCurrencyID.Int = related.InstrumentID
	o.ExerciseCurrencyID.Valid = true

	if o.R == nil {
		o.R = &equityR{
			ExerciseCurrency: related,
		}
	} else {
		o.R.ExerciseCurrency = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			ExerciseCurrencyEquities: EquitySlice{o},
		}
	} else {
		related.R.ExerciseCurrencyEquities = append(related.R.ExerciseCurrencyEquities, o)
	}

	return nil
}

// RemoveExerciseCurrencyG relationship.
// Sets o.R.ExerciseCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Equity) RemoveExerciseCurrencyG(related *Instrument) error {
	return o.RemoveExerciseCurrency(boil.GetDB(), related)
}

// RemoveExerciseCurrencyP relationship.
// Sets o.R.ExerciseCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Equity) RemoveExerciseCurrencyP(exec boil.Executor, related *Instrument) {
	if err := o.RemoveExerciseCurrency(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveExerciseCurrencyGP relationship.
// Sets o.R.ExerciseCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Equity) RemoveExerciseCurrencyGP(related *Instrument) {
	if err := o.RemoveExerciseCurrency(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveExerciseCurrency relationship.
// Sets o.R.ExerciseCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Equity) RemoveExerciseCurrency(exec boil.Executor, related *Instrument) error {
	var err error

	o.ExerciseCurrencyID.Valid = false
	if err = o.Update(exec, "exercise_currency_id"); err != nil {
		o.ExerciseCurrencyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ExerciseCurrency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ExerciseCurrencyEquities {
		if o.ExerciseCurrencyID.Int != ri.ExerciseCurrencyID.Int {
			continue
		}

		ln := len(related.R.ExerciseCurrencyEquities)
		if ln > 1 && i < ln-1 {
			related.R.ExerciseCurrencyEquities[i] = related.R.ExerciseCurrencyEquities[ln-1]
		}
		related.R.ExerciseCurrencyEquities = related.R.ExerciseCurrencyEquities[:ln-1]
		break
	}
	return nil
}

// SetCompanyCurrencyG of the equity to the related item.
// Sets o.R.CompanyCurrency to related.
// Adds o to related.R.CompanyCurrencyEquities.
// Uses the global database handle.
func (o *Equity) SetCompanyCurrencyG(insert bool, related *Instrument) error {
	return o.SetCompanyCurrency(boil.GetDB(), insert, related)
}

// SetCompanyCurrencyP of the equity to the related item.
// Sets o.R.CompanyCurrency to related.
// Adds o to related.R.CompanyCurrencyEquities.
// Panics on error.
func (o *Equity) SetCompanyCurrencyP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetCompanyCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompanyCurrencyGP of the equity to the related item.
// Sets o.R.CompanyCurrency to related.
// Adds o to related.R.CompanyCurrencyEquities.
// Uses the global database handle and panics on error.
func (o *Equity) SetCompanyCurrencyGP(insert bool, related *Instrument) {
	if err := o.SetCompanyCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCompanyCurrency of the equity to the related item.
// Sets o.R.CompanyCurrency to related.
// Adds o to related.R.CompanyCurrencyEquities.
func (o *Equity) SetCompanyCurrency(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, equityPrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyCurrencyID.Int = related.InstrumentID
	o.CompanyCurrencyID.Valid = true

	if o.R == nil {
		o.R = &equityR{
			CompanyCurrency: related,
		}
	} else {
		o.R.CompanyCurrency = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			CompanyCurrencyEquities: EquitySlice{o},
		}
	} else {
		related.R.CompanyCurrencyEquities = append(related.R.CompanyCurrencyEquities, o)
	}

	return nil
}

// RemoveCompanyCurrencyG relationship.
// Sets o.R.CompanyCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Equity) RemoveCompanyCurrencyG(related *Instrument) error {
	return o.RemoveCompanyCurrency(boil.GetDB(), related)
}

// RemoveCompanyCurrencyP relationship.
// Sets o.R.CompanyCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Equity) RemoveCompanyCurrencyP(exec boil.Executor, related *Instrument) {
	if err := o.RemoveCompanyCurrency(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompanyCurrencyGP relationship.
// Sets o.R.CompanyCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Equity) RemoveCompanyCurrencyGP(related *Instrument) {
	if err := o.RemoveCompanyCurrency(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCompanyCurrency relationship.
// Sets o.R.CompanyCurrency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Equity) RemoveCompanyCurrency(exec boil.Executor, related *Instrument) error {
	var err error

	o.CompanyCurrencyID.Valid = false
	if err = o.Update(exec, "company_currency_id"); err != nil {
		o.CompanyCurrencyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CompanyCurrency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CompanyCurrencyEquities {
		if o.CompanyCurrencyID.Int != ri.CompanyCurrencyID.Int {
			continue
		}

		ln := len(related.R.CompanyCurrencyEquities)
		if ln > 1 && i < ln-1 {
			related.R.CompanyCurrencyEquities[i] = related.R.CompanyCurrencyEquities[ln-1]
		}
		related.R.CompanyCurrencyEquities = related.R.CompanyCurrencyEquities[:ln-1]
		break
	}
	return nil
}

// EquitiesG retrieves all records.
func EquitiesG(mods ...qm.QueryMod) equityQuery {
	return Equities(boil.GetDB(), mods...)
}

// Equities retrieves all the records using an executor.
func Equities(exec boil.Executor, mods ...qm.QueryMod) equityQuery {
	mods = append(mods, qm.From("\"instruments\".\"equity\""))
	return equityQuery{NewQuery(exec, mods...)}
}

// FindEquityG retrieves a single record by ID.
func FindEquityG(instrumentID int, selectCols ...string) (*Equity, error) {
	return FindEquity(boil.GetDB(), instrumentID, selectCols...)
}

// FindEquityGP retrieves a single record by ID, and panics on error.
func FindEquityGP(instrumentID int, selectCols ...string) *Equity {
	retobj, err := FindEquity(boil.GetDB(), instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEquity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEquity(exec boil.Executor, instrumentID int, selectCols ...string) (*Equity, error) {
	equityObj := &Equity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"equity\" where \"instrument_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, instrumentID)

	err := q.Bind(equityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from equity")
	}

	return equityObj, nil
}

// FindEquityP retrieves a single record by ID with an executor, and panics on error.
func FindEquityP(exec boil.Executor, instrumentID int, selectCols ...string) *Equity {
	retobj, err := FindEquity(exec, instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Equity) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Equity) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Equity) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Equity) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no equity provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(equityColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	equityInsertCacheMut.RLock()
	cache, cached := equityInsertCache[key]
	equityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			equityColumns,
			equityColumnsWithDefault,
			equityColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(equityType, equityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(equityType, equityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"equity\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"equity\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into equity")
	}

	if !cached {
		equityInsertCacheMut.Lock()
		equityInsertCache[key] = cache
		equityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Equity record. See Update for
// whitelist behavior description.
func (o *Equity) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Equity record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Equity) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Equity, and panics on error.
// See Update for whitelist behavior description.
func (o *Equity) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Equity.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Equity) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	equityUpdateCacheMut.RLock()
	cache, cached := equityUpdateCache[key]
	equityUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			equityColumns,
			equityPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update equity, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, equityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(equityType, equityMapping, append(wl, equityPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update equity row")
	}

	if !cached {
		equityUpdateCacheMut.Lock()
		equityUpdateCache[key] = cache
		equityUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q equityQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q equityQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for equity")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EquitySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EquitySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EquitySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EquitySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), equityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"equity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, equityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in equity slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Equity) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Equity) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Equity) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Equity) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no equity provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(equityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	equityUpsertCacheMut.RLock()
	cache, cached := equityUpsertCache[key]
	equityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			equityColumns,
			equityColumnsWithDefault,
			equityColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			equityColumns,
			equityPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert equity, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(equityPrimaryKeyColumns))
			copy(conflict, equityPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"equity\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(equityType, equityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(equityType, equityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert equity")
	}

	if !cached {
		equityUpsertCacheMut.Lock()
		equityUpsertCache[key] = cache
		equityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Equity record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Equity) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Equity record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Equity) DeleteG() error {
	if o == nil {
		return errors.New("models: no Equity provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Equity record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Equity) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Equity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Equity) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Equity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), equityPrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"equity\" WHERE \"instrument_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from equity")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q equityQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q equityQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no equityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from equity")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EquitySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o EquitySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Equity slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EquitySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EquitySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Equity slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(equityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), equityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"equity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, equityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from equity slice")
	}

	if len(equityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Equity) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Equity) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Equity) ReloadG() error {
	if o == nil {
		return errors.New("models: no Equity provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Equity) Reload(exec boil.Executor) error {
	ret, err := FindEquity(exec, o.InstrumentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EquitySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EquitySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EquitySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty EquitySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EquitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	equities := EquitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), equityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"equity\".* FROM \"instruments\".\"equity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, equityPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&equities)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EquitySlice")
	}

	*o = equities

	return nil
}

// EquityExists checks if the Equity row exists.
func EquityExists(exec boil.Executor, instrumentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"equity\" where \"instrument_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, instrumentID)
	}

	row := exec.QueryRow(sql, instrumentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if equity exists")
	}

	return exists, nil
}

// EquityExistsG checks if the Equity row exists.
func EquityExistsG(instrumentID int) (bool, error) {
	return EquityExists(boil.GetDB(), instrumentID)
}

// EquityExistsGP checks if the Equity row exists. Panics on error.
func EquityExistsGP(instrumentID int) bool {
	e, err := EquityExists(boil.GetDB(), instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EquityExistsP checks if the Equity row exists. Panics on error.
func EquityExistsP(exec boil.Executor, instrumentID int) bool {
	e, err := EquityExists(exec, instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
