// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// InstrumentClass is an object representing the database table.
type InstrumentClass struct {
	InstrumentClassID int16       `boil:"instrument_class_id" json:"instrument_class_id" toml:"instrument_class_id" yaml:"instrument_class_id"`
	Name              null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *instrumentClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instrumentClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstrumentClassColumns = struct {
	InstrumentClassID string
	Name              string
}{
	InstrumentClassID: "instrument_class_id",
	Name:              "name",
}

// instrumentClassR is where relationships are stored.
type instrumentClassR struct {
	Instruments InstrumentSlice
}

// instrumentClassL is where Load methods for each relationship are stored.
type instrumentClassL struct{}

var (
	instrumentClassColumns               = []string{"instrument_class_id", "name"}
	instrumentClassColumnsWithoutDefault = []string{"instrument_class_id", "name"}
	instrumentClassColumnsWithDefault    = []string{}
	instrumentClassPrimaryKeyColumns     = []string{"instrument_class_id"}
)

type (
	// InstrumentClassSlice is an alias for a slice of pointers to InstrumentClass.
	// This should generally be used opposed to []InstrumentClass.
	InstrumentClassSlice []*InstrumentClass
	// InstrumentClassHook is the signature for custom InstrumentClass hook methods
	InstrumentClassHook func(boil.Executor, *InstrumentClass) error

	instrumentClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instrumentClassType                 = reflect.TypeOf(&InstrumentClass{})
	instrumentClassMapping              = queries.MakeStructMapping(instrumentClassType)
	instrumentClassPrimaryKeyMapping, _ = queries.BindMapping(instrumentClassType, instrumentClassMapping, instrumentClassPrimaryKeyColumns)
	instrumentClassInsertCacheMut       sync.RWMutex
	instrumentClassInsertCache          = make(map[string]insertCache)
	instrumentClassUpdateCacheMut       sync.RWMutex
	instrumentClassUpdateCache          = make(map[string]updateCache)
	instrumentClassUpsertCacheMut       sync.RWMutex
	instrumentClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var instrumentClassBeforeInsertHooks []InstrumentClassHook
var instrumentClassBeforeUpdateHooks []InstrumentClassHook
var instrumentClassBeforeDeleteHooks []InstrumentClassHook
var instrumentClassBeforeUpsertHooks []InstrumentClassHook

var instrumentClassAfterInsertHooks []InstrumentClassHook
var instrumentClassAfterSelectHooks []InstrumentClassHook
var instrumentClassAfterUpdateHooks []InstrumentClassHook
var instrumentClassAfterDeleteHooks []InstrumentClassHook
var instrumentClassAfterUpsertHooks []InstrumentClassHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstrumentClass) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstrumentClass) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstrumentClass) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstrumentClass) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstrumentClass) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstrumentClass) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstrumentClass) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstrumentClass) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstrumentClass) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentClassAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstrumentClassHook registers your hook function for all future operations.
func AddInstrumentClassHook(hookPoint boil.HookPoint, instrumentClassHook InstrumentClassHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		instrumentClassBeforeInsertHooks = append(instrumentClassBeforeInsertHooks, instrumentClassHook)
	case boil.BeforeUpdateHook:
		instrumentClassBeforeUpdateHooks = append(instrumentClassBeforeUpdateHooks, instrumentClassHook)
	case boil.BeforeDeleteHook:
		instrumentClassBeforeDeleteHooks = append(instrumentClassBeforeDeleteHooks, instrumentClassHook)
	case boil.BeforeUpsertHook:
		instrumentClassBeforeUpsertHooks = append(instrumentClassBeforeUpsertHooks, instrumentClassHook)
	case boil.AfterInsertHook:
		instrumentClassAfterInsertHooks = append(instrumentClassAfterInsertHooks, instrumentClassHook)
	case boil.AfterSelectHook:
		instrumentClassAfterSelectHooks = append(instrumentClassAfterSelectHooks, instrumentClassHook)
	case boil.AfterUpdateHook:
		instrumentClassAfterUpdateHooks = append(instrumentClassAfterUpdateHooks, instrumentClassHook)
	case boil.AfterDeleteHook:
		instrumentClassAfterDeleteHooks = append(instrumentClassAfterDeleteHooks, instrumentClassHook)
	case boil.AfterUpsertHook:
		instrumentClassAfterUpsertHooks = append(instrumentClassAfterUpsertHooks, instrumentClassHook)
	}
}

// OneP returns a single instrumentClass record from the query, and panics on error.
func (q instrumentClassQuery) OneP() *InstrumentClass {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single instrumentClass record from the query.
func (q instrumentClassQuery) One() (*InstrumentClass, error) {
	o := &InstrumentClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instrument_class")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all InstrumentClass records from the query, and panics on error.
func (q instrumentClassQuery) AllP() InstrumentClassSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all InstrumentClass records from the query.
func (q instrumentClassQuery) All() (InstrumentClassSlice, error) {
	var o []*InstrumentClass

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstrumentClass slice")
	}

	if len(instrumentClassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all InstrumentClass records in the query, and panics on error.
func (q instrumentClassQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all InstrumentClass records in the query.
func (q instrumentClassQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instrument_class rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q instrumentClassQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q instrumentClassQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instrument_class exists")
	}

	return count > 0, nil
}

// InstrumentsG retrieves all the instrument's instrument.
func (o *InstrumentClass) InstrumentsG(mods ...qm.QueryMod) instrumentQuery {
	return o.Instruments(boil.GetDB(), mods...)
}

// Instruments retrieves all the instrument's instrument with an executor.
func (o *InstrumentClass) Instruments(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"instruments\".\"instrument\".\"instrument_class_id\"=?", o.InstrumentClassID),
	)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"instruments\".\"instrument\".*"})
	}

	return query
}

// LoadInstruments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentClassL) LoadInstruments(e boil.Executor, singular bool, maybeInstrumentClass interface{}) error {
	var slice []*InstrumentClass
	var object *InstrumentClass

	count := 1
	if singular {
		object = maybeInstrumentClass.(*InstrumentClass)
	} else {
		slice = *maybeInstrumentClass.(*[]*InstrumentClass)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentClassR{}
		}
		args[0] = object.InstrumentClassID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentClassR{}
			}
			args[i] = obj.InstrumentClassID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_class_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice instrument")
	}

	if len(instrumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Instruments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InstrumentClassID == foreign.InstrumentClassID {
				local.R.Instruments = append(local.R.Instruments, foreign)
				break
			}
		}
	}

	return nil
}

// AddInstrumentsG adds the given related objects to the existing relationships
// of the instrument_class, optionally inserting them as new records.
// Appends related to o.R.Instruments.
// Sets related.R.InstrumentClass appropriately.
// Uses the global database handle.
func (o *InstrumentClass) AddInstrumentsG(insert bool, related ...*Instrument) error {
	return o.AddInstruments(boil.GetDB(), insert, related...)
}

// AddInstrumentsP adds the given related objects to the existing relationships
// of the instrument_class, optionally inserting them as new records.
// Appends related to o.R.Instruments.
// Sets related.R.InstrumentClass appropriately.
// Panics on error.
func (o *InstrumentClass) AddInstrumentsP(exec boil.Executor, insert bool, related ...*Instrument) {
	if err := o.AddInstruments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstrumentsGP adds the given related objects to the existing relationships
// of the instrument_class, optionally inserting them as new records.
// Appends related to o.R.Instruments.
// Sets related.R.InstrumentClass appropriately.
// Uses the global database handle and panics on error.
func (o *InstrumentClass) AddInstrumentsGP(insert bool, related ...*Instrument) {
	if err := o.AddInstruments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInstruments adds the given related objects to the existing relationships
// of the instrument_class, optionally inserting them as new records.
// Appends related to o.R.Instruments.
// Sets related.R.InstrumentClass appropriately.
func (o *InstrumentClass) AddInstruments(exec boil.Executor, insert bool, related ...*Instrument) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InstrumentClassID = o.InstrumentClassID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"instruments\".\"instrument\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_class_id"}),
				strmangle.WhereClause("\"", "\"", 2, instrumentPrimaryKeyColumns),
			)
			values := []interface{}{o.InstrumentClassID, rel.InstrumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InstrumentClassID = o.InstrumentClassID
		}
	}

	if o.R == nil {
		o.R = &instrumentClassR{
			Instruments: related,
		}
	} else {
		o.R.Instruments = append(o.R.Instruments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &instrumentR{
				InstrumentClass: o,
			}
		} else {
			rel.R.InstrumentClass = o
		}
	}
	return nil
}

// InstrumentClassesG retrieves all records.
func InstrumentClassesG(mods ...qm.QueryMod) instrumentClassQuery {
	return InstrumentClasses(boil.GetDB(), mods...)
}

// InstrumentClasses retrieves all the records using an executor.
func InstrumentClasses(exec boil.Executor, mods ...qm.QueryMod) instrumentClassQuery {
	mods = append(mods, qm.From("\"instruments\".\"instrument_class\""))
	return instrumentClassQuery{NewQuery(exec, mods...)}
}

// FindInstrumentClassG retrieves a single record by ID.
func FindInstrumentClassG(instrumentClassID int16, selectCols ...string) (*InstrumentClass, error) {
	return FindInstrumentClass(boil.GetDB(), instrumentClassID, selectCols...)
}

// FindInstrumentClassGP retrieves a single record by ID, and panics on error.
func FindInstrumentClassGP(instrumentClassID int16, selectCols ...string) *InstrumentClass {
	retobj, err := FindInstrumentClass(boil.GetDB(), instrumentClassID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInstrumentClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstrumentClass(exec boil.Executor, instrumentClassID int16, selectCols ...string) (*InstrumentClass, error) {
	instrumentClassObj := &InstrumentClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"instrument_class\" where \"instrument_class_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, instrumentClassID)

	err := q.Bind(instrumentClassObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instrument_class")
	}

	return instrumentClassObj, nil
}

// FindInstrumentClassP retrieves a single record by ID with an executor, and panics on error.
func FindInstrumentClassP(exec boil.Executor, instrumentClassID int16, selectCols ...string) *InstrumentClass {
	retobj, err := FindInstrumentClass(exec, instrumentClassID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *InstrumentClass) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *InstrumentClass) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *InstrumentClass) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *InstrumentClass) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument_class provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentClassColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	instrumentClassInsertCacheMut.RLock()
	cache, cached := instrumentClassInsertCache[key]
	instrumentClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			instrumentClassColumns,
			instrumentClassColumnsWithDefault,
			instrumentClassColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(instrumentClassType, instrumentClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instrumentClassType, instrumentClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"instrument_class\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"instrument_class\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instrument_class")
	}

	if !cached {
		instrumentClassInsertCacheMut.Lock()
		instrumentClassInsertCache[key] = cache
		instrumentClassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single InstrumentClass record. See Update for
// whitelist behavior description.
func (o *InstrumentClass) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single InstrumentClass record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *InstrumentClass) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the InstrumentClass, and panics on error.
// See Update for whitelist behavior description.
func (o *InstrumentClass) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the InstrumentClass.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *InstrumentClass) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	instrumentClassUpdateCacheMut.RLock()
	cache, cached := instrumentClassUpdateCache[key]
	instrumentClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			instrumentClassColumns,
			instrumentClassPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update instrument_class, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"instrument_class\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instrumentClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instrumentClassType, instrumentClassMapping, append(wl, instrumentClassPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update instrument_class row")
	}

	if !cached {
		instrumentClassUpdateCacheMut.Lock()
		instrumentClassUpdateCache[key] = cache
		instrumentClassUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q instrumentClassQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q instrumentClassQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for instrument_class")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InstrumentClassSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InstrumentClassSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InstrumentClassSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstrumentClassSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"instrument_class\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instrumentClassPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in instrumentClass slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *InstrumentClass) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *InstrumentClass) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *InstrumentClass) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *InstrumentClass) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument_class provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentClassColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instrumentClassUpsertCacheMut.RLock()
	cache, cached := instrumentClassUpsertCache[key]
	instrumentClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			instrumentClassColumns,
			instrumentClassColumnsWithDefault,
			instrumentClassColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			instrumentClassColumns,
			instrumentClassPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert instrument_class, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instrumentClassPrimaryKeyColumns))
			copy(conflict, instrumentClassPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"instrument_class\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instrumentClassType, instrumentClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instrumentClassType, instrumentClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instrument_class")
	}

	if !cached {
		instrumentClassUpsertCacheMut.Lock()
		instrumentClassUpsertCache[key] = cache
		instrumentClassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single InstrumentClass record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstrumentClass) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single InstrumentClass record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *InstrumentClass) DeleteG() error {
	if o == nil {
		return errors.New("models: no InstrumentClass provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single InstrumentClass record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstrumentClass) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single InstrumentClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstrumentClass) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstrumentClass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instrumentClassPrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"instrument_class\" WHERE \"instrument_class_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from instrument_class")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q instrumentClassQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q instrumentClassQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no instrumentClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrument_class")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InstrumentClassSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InstrumentClassSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no InstrumentClass slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InstrumentClassSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstrumentClassSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstrumentClass slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(instrumentClassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"instrument_class\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentClassPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrumentClass slice")
	}

	if len(instrumentClassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *InstrumentClass) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *InstrumentClass) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *InstrumentClass) ReloadG() error {
	if o == nil {
		return errors.New("models: no InstrumentClass provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstrumentClass) Reload(exec boil.Executor) error {
	ret, err := FindInstrumentClass(exec, o.InstrumentClassID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentClassSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentClassSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentClassSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty InstrumentClassSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentClassSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	instrumentClasses := InstrumentClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"instrument_class\".* FROM \"instruments\".\"instrument_class\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&instrumentClasses)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstrumentClassSlice")
	}

	*o = instrumentClasses

	return nil
}

// InstrumentClassExists checks if the InstrumentClass row exists.
func InstrumentClassExists(exec boil.Executor, instrumentClassID int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"instrument_class\" where \"instrument_class_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, instrumentClassID)
	}

	row := exec.QueryRow(sql, instrumentClassID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instrument_class exists")
	}

	return exists, nil
}

// InstrumentClassExistsG checks if the InstrumentClass row exists.
func InstrumentClassExistsG(instrumentClassID int16) (bool, error) {
	return InstrumentClassExists(boil.GetDB(), instrumentClassID)
}

// InstrumentClassExistsGP checks if the InstrumentClass row exists. Panics on error.
func InstrumentClassExistsGP(instrumentClassID int16) bool {
	e, err := InstrumentClassExists(boil.GetDB(), instrumentClassID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InstrumentClassExistsP checks if the InstrumentClass row exists. Panics on error.
func InstrumentClassExistsP(exec boil.Executor, instrumentClassID int16) bool {
	e, err := InstrumentClassExists(exec, instrumentClassID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
