// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// InstitutionRole is an object representing the database table.
type InstitutionRole struct {
	InstitutionID int         `boil:"institution_id" json:"institution_id" toml:"institution_id" yaml:"institution_id"`
	InstrumentID  int         `boil:"instrument_id" json:"instrument_id" toml:"instrument_id" yaml:"instrument_id"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	FromDate      time.Time   `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ThruDate      null.Time   `boil:"thru_date" json:"thru_date,omitempty" toml:"thru_date" yaml:"thru_date,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy     string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy     string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *institutionRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L institutionRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstitutionRoleColumns = struct {
	InstitutionID string
	InstrumentID  string
	Description   string
	FromDate      string
	ThruDate      string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
}{
	InstitutionID: "institution_id",
	InstrumentID:  "instrument_id",
	Description:   "description",
	FromDate:      "from_date",
	ThruDate:      "thru_date",
	CreatedAt:     "created_at",
	CreatedBy:     "created_by",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
}

// institutionRoleR is where relationships are stored.
type institutionRoleR struct {
	Institution *Institution
	Instrument  *Instrument
}

// institutionRoleL is where Load methods for each relationship are stored.
type institutionRoleL struct{}

var (
	institutionRoleColumns               = []string{"institution_id", "instrument_id", "description", "from_date", "thru_date", "created_at", "created_by", "updated_at", "updated_by"}
	institutionRoleColumnsWithoutDefault = []string{"institution_id", "instrument_id", "description", "from_date", "thru_date", "created_by", "updated_by"}
	institutionRoleColumnsWithDefault    = []string{"created_at", "updated_at"}
	institutionRolePrimaryKeyColumns     = []string{"institution_id", "instrument_id"}
)

type (
	// InstitutionRoleSlice is an alias for a slice of pointers to InstitutionRole.
	// This should generally be used opposed to []InstitutionRole.
	InstitutionRoleSlice []*InstitutionRole
	// InstitutionRoleHook is the signature for custom InstitutionRole hook methods
	InstitutionRoleHook func(boil.Executor, *InstitutionRole) error

	institutionRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	institutionRoleType                 = reflect.TypeOf(&InstitutionRole{})
	institutionRoleMapping              = queries.MakeStructMapping(institutionRoleType)
	institutionRolePrimaryKeyMapping, _ = queries.BindMapping(institutionRoleType, institutionRoleMapping, institutionRolePrimaryKeyColumns)
	institutionRoleInsertCacheMut       sync.RWMutex
	institutionRoleInsertCache          = make(map[string]insertCache)
	institutionRoleUpdateCacheMut       sync.RWMutex
	institutionRoleUpdateCache          = make(map[string]updateCache)
	institutionRoleUpsertCacheMut       sync.RWMutex
	institutionRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var institutionRoleBeforeInsertHooks []InstitutionRoleHook
var institutionRoleBeforeUpdateHooks []InstitutionRoleHook
var institutionRoleBeforeDeleteHooks []InstitutionRoleHook
var institutionRoleBeforeUpsertHooks []InstitutionRoleHook

var institutionRoleAfterInsertHooks []InstitutionRoleHook
var institutionRoleAfterSelectHooks []InstitutionRoleHook
var institutionRoleAfterUpdateHooks []InstitutionRoleHook
var institutionRoleAfterDeleteHooks []InstitutionRoleHook
var institutionRoleAfterUpsertHooks []InstitutionRoleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstitutionRole) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstitutionRole) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstitutionRole) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstitutionRole) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstitutionRole) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstitutionRole) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstitutionRole) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstitutionRole) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstitutionRole) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range institutionRoleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstitutionRoleHook registers your hook function for all future operations.
func AddInstitutionRoleHook(hookPoint boil.HookPoint, institutionRoleHook InstitutionRoleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		institutionRoleBeforeInsertHooks = append(institutionRoleBeforeInsertHooks, institutionRoleHook)
	case boil.BeforeUpdateHook:
		institutionRoleBeforeUpdateHooks = append(institutionRoleBeforeUpdateHooks, institutionRoleHook)
	case boil.BeforeDeleteHook:
		institutionRoleBeforeDeleteHooks = append(institutionRoleBeforeDeleteHooks, institutionRoleHook)
	case boil.BeforeUpsertHook:
		institutionRoleBeforeUpsertHooks = append(institutionRoleBeforeUpsertHooks, institutionRoleHook)
	case boil.AfterInsertHook:
		institutionRoleAfterInsertHooks = append(institutionRoleAfterInsertHooks, institutionRoleHook)
	case boil.AfterSelectHook:
		institutionRoleAfterSelectHooks = append(institutionRoleAfterSelectHooks, institutionRoleHook)
	case boil.AfterUpdateHook:
		institutionRoleAfterUpdateHooks = append(institutionRoleAfterUpdateHooks, institutionRoleHook)
	case boil.AfterDeleteHook:
		institutionRoleAfterDeleteHooks = append(institutionRoleAfterDeleteHooks, institutionRoleHook)
	case boil.AfterUpsertHook:
		institutionRoleAfterUpsertHooks = append(institutionRoleAfterUpsertHooks, institutionRoleHook)
	}
}

// OneP returns a single institutionRole record from the query, and panics on error.
func (q institutionRoleQuery) OneP() *InstitutionRole {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single institutionRole record from the query.
func (q institutionRoleQuery) One() (*InstitutionRole, error) {
	o := &InstitutionRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for institution_role")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all InstitutionRole records from the query, and panics on error.
func (q institutionRoleQuery) AllP() InstitutionRoleSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all InstitutionRole records from the query.
func (q institutionRoleQuery) All() (InstitutionRoleSlice, error) {
	var o []*InstitutionRole

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstitutionRole slice")
	}

	if len(institutionRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all InstitutionRole records in the query, and panics on error.
func (q institutionRoleQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all InstitutionRole records in the query.
func (q institutionRoleQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count institution_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q institutionRoleQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q institutionRoleQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if institution_role exists")
	}

	return count > 0, nil
}

// InstitutionG pointed to by the foreign key.
func (o *InstitutionRole) InstitutionG(mods ...qm.QueryMod) institutionQuery {
	return o.Institution(boil.GetDB(), mods...)
}

// Institution pointed to by the foreign key.
func (o *InstitutionRole) Institution(exec boil.Executor, mods ...qm.QueryMod) institutionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("institution_id=?", o.InstitutionID),
	}

	queryMods = append(queryMods, mods...)

	query := Institutions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"institution\"")

	return query
}

// InstrumentG pointed to by the foreign key.
func (o *InstitutionRole) InstrumentG(mods ...qm.QueryMod) instrumentQuery {
	return o.Instrument(boil.GetDB(), mods...)
}

// Instrument pointed to by the foreign key.
func (o *InstitutionRole) Instrument(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("instrument_id=?", o.InstrumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
} // LoadInstitution allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (institutionRoleL) LoadInstitution(e boil.Executor, singular bool, maybeInstitutionRole interface{}) error {
	var slice []*InstitutionRole
	var object *InstitutionRole

	count := 1
	if singular {
		object = maybeInstitutionRole.(*InstitutionRole)
	} else {
		slice = *maybeInstitutionRole.(*[]*InstitutionRole)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &institutionRoleR{}
		}
		args[0] = object.InstitutionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &institutionRoleR{}
			}
			args[i] = obj.InstitutionID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"institution\" where \"institution_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Institution")
	}
	defer results.Close()

	var resultSlice []*Institution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Institution")
	}

	if len(institutionRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Institution = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstitutionID == foreign.InstitutionID {
				local.R.Institution = foreign
				break
			}
		}
	}

	return nil
}

// LoadInstrument allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (institutionRoleL) LoadInstrument(e boil.Executor, singular bool, maybeInstitutionRole interface{}) error {
	var slice []*InstitutionRole
	var object *InstitutionRole

	count := 1
	if singular {
		object = maybeInstitutionRole.(*InstitutionRole)
	} else {
		slice = *maybeInstitutionRole.(*[]*InstitutionRole)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &institutionRoleR{}
		}
		args[0] = object.InstrumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &institutionRoleR{}
			}
			args[i] = obj.InstrumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"instrument_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(institutionRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Instrument = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InstrumentID == foreign.InstrumentID {
				local.R.Instrument = foreign
				break
			}
		}
	}

	return nil
}

// SetInstitutionG of the institution_role to the related item.
// Sets o.R.Institution to related.
// Adds o to related.R.InstitutionRoles.
// Uses the global database handle.
func (o *InstitutionRole) SetInstitutionG(insert bool, related *Institution) error {
	return o.SetInstitution(boil.GetDB(), insert, related)
}

// SetInstitutionP of the institution_role to the related item.
// Sets o.R.Institution to related.
// Adds o to related.R.InstitutionRoles.
// Panics on error.
func (o *InstitutionRole) SetInstitutionP(exec boil.Executor, insert bool, related *Institution) {
	if err := o.SetInstitution(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstitutionGP of the institution_role to the related item.
// Sets o.R.Institution to related.
// Adds o to related.R.InstitutionRoles.
// Uses the global database handle and panics on error.
func (o *InstitutionRole) SetInstitutionGP(insert bool, related *Institution) {
	if err := o.SetInstitution(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstitution of the institution_role to the related item.
// Sets o.R.Institution to related.
// Adds o to related.R.InstitutionRoles.
func (o *InstitutionRole) SetInstitution(exec boil.Executor, insert bool, related *Institution) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"institution_id"}),
		strmangle.WhereClause("\"", "\"", 2, institutionRolePrimaryKeyColumns),
	)
	values := []interface{}{related.InstitutionID, o.InstitutionID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstitutionID = related.InstitutionID

	if o.R == nil {
		o.R = &institutionRoleR{
			Institution: related,
		}
	} else {
		o.R.Institution = related
	}

	if related.R == nil {
		related.R = &institutionR{
			InstitutionRoles: InstitutionRoleSlice{o},
		}
	} else {
		related.R.InstitutionRoles = append(related.R.InstitutionRoles, o)
	}

	return nil
}

// SetInstrumentG of the institution_role to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.InstitutionRoles.
// Uses the global database handle.
func (o *InstitutionRole) SetInstrumentG(insert bool, related *Instrument) error {
	return o.SetInstrument(boil.GetDB(), insert, related)
}

// SetInstrumentP of the institution_role to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.InstitutionRoles.
// Panics on error.
func (o *InstitutionRole) SetInstrumentP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetInstrument(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrumentGP of the institution_role to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.InstitutionRoles.
// Uses the global database handle and panics on error.
func (o *InstitutionRole) SetInstrumentGP(insert bool, related *Instrument) {
	if err := o.SetInstrument(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetInstrument of the institution_role to the related item.
// Sets o.R.Instrument to related.
// Adds o to related.R.InstitutionRoles.
func (o *InstitutionRole) SetInstrument(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"instrument_id"}),
		strmangle.WhereClause("\"", "\"", 2, institutionRolePrimaryKeyColumns),
	)
	values := []interface{}{related.InstrumentID, o.InstitutionID, o.InstrumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InstrumentID = related.InstrumentID

	if o.R == nil {
		o.R = &institutionRoleR{
			Instrument: related,
		}
	} else {
		o.R.Instrument = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			InstitutionRoles: InstitutionRoleSlice{o},
		}
	} else {
		related.R.InstitutionRoles = append(related.R.InstitutionRoles, o)
	}

	return nil
}

// InstitutionRolesG retrieves all records.
func InstitutionRolesG(mods ...qm.QueryMod) institutionRoleQuery {
	return InstitutionRoles(boil.GetDB(), mods...)
}

// InstitutionRoles retrieves all the records using an executor.
func InstitutionRoles(exec boil.Executor, mods ...qm.QueryMod) institutionRoleQuery {
	mods = append(mods, qm.From("\"instruments\".\"institution_role\""))
	return institutionRoleQuery{NewQuery(exec, mods...)}
}

// FindInstitutionRoleG retrieves a single record by ID.
func FindInstitutionRoleG(institutionID int, instrumentID int, selectCols ...string) (*InstitutionRole, error) {
	return FindInstitutionRole(boil.GetDB(), institutionID, instrumentID, selectCols...)
}

// FindInstitutionRoleGP retrieves a single record by ID, and panics on error.
func FindInstitutionRoleGP(institutionID int, instrumentID int, selectCols ...string) *InstitutionRole {
	retobj, err := FindInstitutionRole(boil.GetDB(), institutionID, instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInstitutionRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstitutionRole(exec boil.Executor, institutionID int, instrumentID int, selectCols ...string) (*InstitutionRole, error) {
	institutionRoleObj := &InstitutionRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"institution_role\" where \"institution_id\"=$1 AND \"instrument_id\"=$2", sel,
	)

	q := queries.Raw(exec, query, institutionID, instrumentID)

	err := q.Bind(institutionRoleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from institution_role")
	}

	return institutionRoleObj, nil
}

// FindInstitutionRoleP retrieves a single record by ID with an executor, and panics on error.
func FindInstitutionRoleP(exec boil.Executor, institutionID int, instrumentID int, selectCols ...string) *InstitutionRole {
	retobj, err := FindInstitutionRole(exec, institutionID, instrumentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *InstitutionRole) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *InstitutionRole) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *InstitutionRole) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *InstitutionRole) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no institution_role provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionRoleColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	institutionRoleInsertCacheMut.RLock()
	cache, cached := institutionRoleInsertCache[key]
	institutionRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			institutionRoleColumns,
			institutionRoleColumnsWithDefault,
			institutionRoleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(institutionRoleType, institutionRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(institutionRoleType, institutionRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"institution_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"institution_role\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into institution_role")
	}

	if !cached {
		institutionRoleInsertCacheMut.Lock()
		institutionRoleInsertCache[key] = cache
		institutionRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single InstitutionRole record. See Update for
// whitelist behavior description.
func (o *InstitutionRole) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single InstitutionRole record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *InstitutionRole) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the InstitutionRole, and panics on error.
// See Update for whitelist behavior description.
func (o *InstitutionRole) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the InstitutionRole.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *InstitutionRole) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	institutionRoleUpdateCacheMut.RLock()
	cache, cached := institutionRoleUpdateCache[key]
	institutionRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			institutionRoleColumns,
			institutionRolePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update institution_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, institutionRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(institutionRoleType, institutionRoleMapping, append(wl, institutionRolePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update institution_role row")
	}

	if !cached {
		institutionRoleUpdateCacheMut.Lock()
		institutionRoleUpdateCache[key] = cache
		institutionRoleUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q institutionRoleQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q institutionRoleQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for institution_role")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InstitutionRoleSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InstitutionRoleSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InstitutionRoleSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstitutionRoleSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"institution_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, institutionRolePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in institutionRole slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *InstitutionRole) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *InstitutionRole) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *InstitutionRole) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *InstitutionRole) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no institution_role provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(institutionRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	institutionRoleUpsertCacheMut.RLock()
	cache, cached := institutionRoleUpsertCache[key]
	institutionRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			institutionRoleColumns,
			institutionRoleColumnsWithDefault,
			institutionRoleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			institutionRoleColumns,
			institutionRolePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert institution_role, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(institutionRolePrimaryKeyColumns))
			copy(conflict, institutionRolePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"institution_role\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(institutionRoleType, institutionRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(institutionRoleType, institutionRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert institution_role")
	}

	if !cached {
		institutionRoleUpsertCacheMut.Lock()
		institutionRoleUpsertCache[key] = cache
		institutionRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single InstitutionRole record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstitutionRole) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single InstitutionRole record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *InstitutionRole) DeleteG() error {
	if o == nil {
		return errors.New("models: no InstitutionRole provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single InstitutionRole record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstitutionRole) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single InstitutionRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstitutionRole) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstitutionRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), institutionRolePrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"institution_role\" WHERE \"institution_id\"=$1 AND \"instrument_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from institution_role")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q institutionRoleQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q institutionRoleQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no institutionRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from institution_role")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InstitutionRoleSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InstitutionRoleSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no InstitutionRole slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InstitutionRoleSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstitutionRoleSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstitutionRole slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(institutionRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"institution_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, institutionRolePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from institutionRole slice")
	}

	if len(institutionRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *InstitutionRole) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *InstitutionRole) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *InstitutionRole) ReloadG() error {
	if o == nil {
		return errors.New("models: no InstitutionRole provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstitutionRole) Reload(exec boil.Executor) error {
	ret, err := FindInstitutionRole(exec, o.InstitutionID, o.InstrumentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstitutionRoleSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstitutionRoleSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstitutionRoleSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty InstitutionRoleSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstitutionRoleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	institutionRoles := InstitutionRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), institutionRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"institution_role\".* FROM \"instruments\".\"institution_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, institutionRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&institutionRoles)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstitutionRoleSlice")
	}

	*o = institutionRoles

	return nil
}

// InstitutionRoleExists checks if the InstitutionRole row exists.
func InstitutionRoleExists(exec boil.Executor, institutionID int, instrumentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"institution_role\" where \"institution_id\"=$1 AND \"instrument_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, institutionID, instrumentID)
	}

	row := exec.QueryRow(sql, institutionID, instrumentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if institution_role exists")
	}

	return exists, nil
}

// InstitutionRoleExistsG checks if the InstitutionRole row exists.
func InstitutionRoleExistsG(institutionID int, instrumentID int) (bool, error) {
	return InstitutionRoleExists(boil.GetDB(), institutionID, instrumentID)
}

// InstitutionRoleExistsGP checks if the InstitutionRole row exists. Panics on error.
func InstitutionRoleExistsGP(institutionID int, instrumentID int) bool {
	e, err := InstitutionRoleExists(boil.GetDB(), institutionID, instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InstitutionRoleExistsP checks if the InstitutionRole row exists. Panics on error.
func InstitutionRoleExistsP(exec boil.Executor, institutionID int, instrumentID int) bool {
	e, err := InstitutionRoleExists(exec, institutionID, instrumentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
